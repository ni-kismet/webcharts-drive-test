{"version":3,"sources":["niDataPipeline.js","niTypedHistoryBuffer.js","niGraphDataPipeline.js","niChartDataPipeline.js","niTickFormatters.js","ni-cartesian-graph-base.js","ni-cartesian-graph.js","ni-chart.js","ni-intensity-graph.js","ni-cartesian-axis.js","ni-color-scale.js","ni-cartesian-plot.js","ni-cartesian-plot-renderer.js","ni-cursor.js","niTypedWebCharts.js"],"names":["NationalInstruments","HtmlVI","DataPipeline","decimateAW","series","start","end","buckets","startIndex","step","endIndex","decimate1D","minMaxForRange","data","s","e","result","max","Infinity","maxIndex","min","minIndex","i","push","extendBuckets","len","firstValue","lastValue","bucketsLength","length","Math","floor","unshift","updatePointsResult","verticalBucketIndex","horizontalBucketIndex","width","dataMatrix","res","matrixIndex","decimate1DLog","datapoints","points","transformedStart","transformedEnd","firstSample","lastSample","transform","xaxis","options","inverseTransform","atEnd","ceil","generateBucketIndexes","index","iindex","newBucket","mode","nextBucket","decimatePoints","startX","endX","startY","endY","height","yaxis","decimatePointsLog","verticalBucketStep","horizontalBucketStep","Array","transformedXValue","transformedYValue","transformX","x","transformY","y","transformedStartX","transformedStartY","decimateLinesXY","currentVerticalBucket","currentHorizontalBucket","previousVerticalBucket","previousHorizontalBucket","previousX","previousY","currentX","currentY","futureX","futureY","isProbablyCrossingEdge","v1x","v1y","v2x","v2y","ArrayBuffer","isView","dataStr","Object","prototype","toString","call","indexOf","DataTypesEnum","freeze","niAnalogWaveform","niAnalogWaveformArray","XYClusterOfArrays","XYArrayOfClusters","XYArrayOfClusterOfArrays","XYArrayOfArrayOfClusters","XYArrayOfClusterOfArrayOfPoint","oneDimensionNumericArray","twoDimensionsNumericArray","oneDimensionComplexArray","twoDimensionsComplexArray","numeric","clusterOfNumerics","arrayOfClusterOfNumerics","historyBuffer","empty","unknown","isXYClusterOfArrays","niType","getName","NITypeNames","CLUSTER","getFields","getSubtype","ARRAY","isXYCluster","every","st","isInteger","isFloat","isTimeStamp","isClusterOfNumerics","inferDataTypeFromNIType","NIType","ANALOGWAVEFORM","getRank","isXYClusterOfArrayOfPoint","isComplex","TypedHistoryBuffer","HistoryBuffer","apply","this","arguments","valueType","setNIType","clear","setType","setWidth","pushTypedData","value","j","row","keys","appendArray","GraphDataPipeline","graphDataPipeline","ComplexNumber","window","NIComplex","AnalogWaveform","NIAnalogWaveform","TimeStamp","NITimestamp","proto","toFlot","graph","convertToFlotFormat","isTimeStampValue","timeStamp","isNaN","seconds","fractions","isWaveform","isArray","Y","key","isXYArrayOfClusters","isXYArrayOfClusterOfArrayOfPoint","inferDataType","isXYArrayOfClusterOfArrays","isXYArrayOfArrayOfClusters","is1DComplexArray","is2DComplexArray","waveformToFlotFormat","waveform","flatdata","t0","valueOf","dt","decimate","xyClusterOfArraysToFlotFormat","xydata","count","xyArrayOfClustersToFlotFormat","convertTimeToNumberFunc","timeData","noOpFunc","numberData","xConversionFunc","yConversionFunc","xyArrayOfClusterOfArrayOfPointToFlotFormat","xyDataArray","map","array","pointData","pointKeys","xyClusterOfArrayOfPointToFlotFormat","dataValuesArray2D","dataValuesArray","channelName","updatePlotName","xyArrayOfArrayOfClustersToFlotFormat","parseFromString","ChartDataPipeline","pushBuffersToHistoryBuffer","buffers","col","loadValueIntoHistoryBuffer","chart","NINumericFormatters","getSiSignificatDigitsFormatter","format","num","extension","siValue","toSiNotation","decimals","Number","slice","toDecPrecisionNotation","getSiDecimalFormatter","siTickFormatter","axis","precision","plot","log10AxisMin","croppedMin","croppedMax","tickDecimals","computeCroppedValue","log","abs","LOG10E","computeValuePrecision","direction","ticks","precisionDecimals","reduceNumberOfDecimals","fixDecimalCountForSmallNumbers","exponent","minSiExtensionExponent","getDecPrecisionNotationFormatter","getDecFixedNotationFormatter","dontRound","roundUsing","toDecFixedNotation","log10Max","log10Min","orderSizeDif","log10Value","val","roundingPower","exp","pow","croppedVal","roundFunction","number","precisionDigits","tempNumber","parseTickFormatterType","colonMarkIndex","g","unknownFormat","type","parsedFormat","formatSubstring","lastIndexOf","N","G","parseInt","decFormatTypeSubstring","getTickFormatter","$","Globals","jQuery","NI_SUPPORT","NISupport","plotsUpdatesEnabled","graphConfigPending","seriesLength","defaultPlotColors","assign","Elements","CartesianGraphBase","JQX","BaseElement","[object Object]","getSettingsWorkaround","lines","show","lineWidth","shadowSize","axisLabels","xaxes","yaxes","zoom","interactive","active","trigger","pan","enableTouch","selection","grid","colors","cartesianGraphSettings","getSettings","plotAreaMargin","margin","JSON","parse","cursors","axes","a","getViewConfig","position","c","graphTools","allowsScrollWheelZoom","allowsPan","childElement","graphdiv","undefined","cartesianGraphData","createData","plots","parsedValue","configureGraph","setClick","setHover","setGridStyle","gridEl","that","getCursors","forEach","cursor","cookie","setCursor","error","message","event","cursordata","target","updateCursorElement","parentElement","detail","axisTouched","getFlotAxis","resetOffset","updateCartesianAxesFromFlot","CartesianAxis","syncWithFlot","throttle","updateGraphConfig","name","label","dataSeries","plotConfig","setData","setupGrid","draw","notifyPlotLegend","element","plotCount","properties","super","graphRef","created","plotLegend","cursorLegend","scaleLegend","tooltip","tooltipHolder","addGraphItemListeners","size","isVisibleElement","createGraph","clearTextCache","resize","detachChildElement","listeners","resizeEventHack","getComputedStyle","display","document","createElement","style","className","children","insertBefore","appendChild","id","uniqueId","fakeGrid","visibility","bind","pos","item","seriesIndex","datapoint","hoverFormat","str","html","css","top","pageY","offset","left","pageX","fadeIn","hide","getPlaceholder","onCursorUpdates","onRecenterPlot","attached","attachChildren","attachLegends","detached","destroy","removeChild","childElements","addEventListener","evt","newPlot","siblings","getElementsByTagName","newOrderedPlotList","sibling","find","p","pushNewPlot","updateGraphConfigWhenPlotsUpdatesAreEnabled","splice","notifyScaleLegend","notifyCursorLegend","flotAxis","recenter","originalSource","eventConfig","bubbles","cancelable","dispatchEvent","CustomEvent","on","ranges","notifyGraphTools","tagsAndClasses","NI-COLOR-SCALE","ColorScale","NI-CARTESIAN-PLOT","CartesianPlot","NI-CURSOR","Cursor","NI-CARTESIAN-AXIS","tagName","isReady","attachToGraph","graphElement","legendTags","toUpperCase","myLegends","niControlId","legend","propertyName","oldValue","newValue","propertyChangedHandler","args","replace","match","toFixed","toExponential","graphData","graphSettings","clickable","isHoverable","hoverable","borderStyle","borderBottomWidth","borderTopWidth","borderLeftWidth","borderRightWidth","borderWidth","bottom","right","color","borderColor","bgColor","backgroundColor","axisPosition","axisRef","canvasOrSvgSources","destinationCanvas","composeImages","bufferSize","ready","settings","IntensityGraph","ColorScaleType","parsedData","dataMin","dataMax","tempMin","tempMax","buf","autoScaleColor","intensitygraph","colorScaleMin","colorScaleMax","gradient","defaultData","markers","autoScale","range","dataRange","lowColor","highColor","colorScaleAxis","getYAxes","filter","graphdata","firstYAxisIndex","findIndex","plotData","updateColorScaleLimits","isTimeAxis","toFlotTimeFormat","firstDelimiterIndex","timeFormat","substring","getDefaultAutoScale","scaletype","_parentGraph","nodeName","getWindowSize","windowSize","_defaultMax","_defaultMin","showLabel","minimum","maximum","logScale","timeFormatEpoch","showTickLabels","gridLines","showTicks","showMinorTicks","inverted","labelWidth","reserveSpace","sendEventToParentGraph","fontSize","fontFamily","fontWeight","fontStyle","textDecoration","currStyle","grow","test","axisLabel","growOnly","timeformat","timeEpoch","tickFormatter","_navigationOffset","below","above","font","parseFloat","weight","family","axisZoom","plotZoom","axisPan","plotPan","getAxes","flot","getData","computeRangeForDataSeries","defaultRange","xmin","POSITIVE_INFINITY","ymin","xmax","NEGATIVE_INFINITY","ymax","reduce","defaultPlotConfig","enableHover","enableClick","allAxes","CartesianGraph","Chart","addPlotItemListeners","CartesianPlotRenderer","attachToPlot","plotRenderer","getXAxisIndexByNIControlID","getYAxisIndexByNIControlID","toFillTowards","baseLine","areaFillOpacity","lineStroke","lineStyle","areaFill","areaBaseLine","barFill","barBaseLine","pointColor","pointSize","pointShape","_parentPlot","sendEventToParentPlot","getColor","fill","zero","fillTowards","dashes","toFlotLineStyle","radius","symbol","bars","barWidth","align","targetShape","crosshairStyle","showValue","snapToPlot","interpolate","showThumbs","thumbLabel","relativeX","relativeY","showValues","defaultxaxis","defaultyaxis","thumbAbbreviation","NITypedCartesianGraphModule","observer","moduleName","ownerElement","valueTypeNeedsUpdate","createNIType","NITypedChartModule","setNITypeToHistoryBuffer","NITypedIntensityGraphModule","NITypes","DOUBLE","makeArray","toJSON","descriptor","err","niTypeStr","whenRegistered","addModule"],"mappings":"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","file":"webcharts.min.js","sourcesContent":["//****************************************\r\n// GraphDataPipeline\r\n// common utility functions for conversion of LabVIEW datatypes flot data series\r\n// used by graphs and charts.\r\n// National Instruments Copyright 2016\r\n//****************************************\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline = {};\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline.decimateAW = function (series, start, end, buckets) {\r\n        var startIndex = (start - series.start) / series.step,\r\n            endIndex = (end - series.start) / series.step;\r\n\r\n        return NationalInstruments.HtmlVI.DataPipeline.decimate1D(series, startIndex, endIndex, buckets);\r\n    }\r\n\r\n    // computes min and max for a data points array with the specified range (from start, inclusive to the end, exclusive)\r\n    // and add them to the result. data is an array containing x coordinates alternating with y coordinates\r\n    var minMaxForRange = function (data, s, e, result) {\r\n        var max = -Infinity,\r\n            maxIndex = -1,\r\n            min = Infinity,\r\n            minIndex = -1;\r\n\r\n        for (var i = s * 2; i < e * 2; i += 2) {\r\n            if (data[i + 1] < min) {\r\n                minIndex = data[i];\r\n                min = data[i + 1];\r\n            }\r\n            if (data[i + 1] > max) {\r\n                maxIndex = data[i];\r\n                max = data[i + 1];\r\n            }\r\n        }\r\n\r\n        if (maxIndex === -1) {\r\n            return;\r\n        }\r\n\r\n        if (maxIndex === minIndex) {\r\n            result.push(minIndex);\r\n            result.push(min);\r\n        } else {\r\n            if (maxIndex < minIndex) {\r\n                result.push(maxIndex);\r\n                result.push(max);\r\n                result.push(minIndex);\r\n                result.push(min);\r\n            } else {\r\n                result.push(minIndex);\r\n                result.push(min);\r\n                result.push(maxIndex);\r\n                result.push(max);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* given a data series with a nonlinear, monothonic transformation function on the x axis,\r\n    it splits the interval between s and e in buckets of equal \"pixel width\" */\r\n    var generateBucketIndexes = function(series, s, e, width, buckets) {\r\n        var len = series.datapoints.points.length / 2,\r\n            step,\r\n            transformedStart, transformedEnd,\r\n            firstSample, lastSample,\r\n            transform = series.xaxis.options.transform,\r\n            inverseTransform = series.xaxis.options.inverseTransform;\r\n\r\n        transformedStart = transform(s);\r\n        transformedEnd = transform(e);\r\n        step = (transformedEnd - transformedStart) / width;\r\n\r\n        if (step === 0 || len === 0) {\r\n            return;\r\n        }\r\n\r\n        // if steps are negative, reverse the bounds check\r\n        const atEnd = step > 0\r\n            ? function (start, end) { return start < end }\r\n            : function (start, end) { return start > end };\r\n\r\n        for (var i = transformedStart; atEnd(i, transformedEnd + step); i += step) {\r\n            firstSample = inverseTransform(i);\r\n            lastSample = inverseTransform(i + step);\r\n\r\n            if (lastSample <= 0 || firstSample >= len) {\r\n                continue;\r\n            }\r\n\r\n            if (firstSample < 0) {\r\n                firstSample = 0;\r\n            }\r\n\r\n            if (lastSample > len) {\r\n                lastSample = len;\r\n            }\r\n\r\n            firstSample = Math.ceil(firstSample);\r\n            lastSample = Math.floor(lastSample);\r\n\r\n            if (firstSample > lastSample) {\r\n                continue;\r\n            }\r\n\r\n            buckets.push(firstSample);\r\n            buckets.push(lastSample);\r\n        }\r\n\r\n        extendBuckets(s, e, len, buckets);\r\n    }\r\n\r\n    /* extends the buckets so that they contain also the points imediately before and after the interval\r\n    so in the case of line graphs the lines entering into the first visible point and the line leaving the\r\n    last visisble point are also drawn.*/\r\n    var extendBuckets = function (start, end, len, buckets) {\r\n        var bucketsLength = buckets.length;\r\n        var firstValue, lastValue;\r\n\r\n        if (bucketsLength === 0) {\r\n            buckets.push(Math.floor(start));\r\n            buckets.push(Math.floor(start) + 1);\r\n        } else if (bucketsLength === 2) {\r\n            if (buckets[0] > 0) {\r\n                buckets[0]--;\r\n            }\r\n\r\n            if (buckets[1] < len) {\r\n                buckets[1]++;\r\n            }\r\n        } else {\r\n            firstValue = buckets[0];\r\n            lastValue = buckets[bucketsLength - 1];\r\n\r\n            if (firstValue > 0) {\r\n                buckets.unshift(firstValue - 1);\r\n                buckets.unshift(firstValue - 1);\r\n            }\r\n\r\n            if (lastValue < len) {\r\n                buckets.push(lastValue + 1);\r\n                buckets.push(lastValue + 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    /* decimates a data series with a log x axis */\r\n    NationalInstruments.HtmlVI.DataPipeline.decimate1DLog = function (series, start, end, width) {\r\n        var buckets = [],\r\n            result = [],\r\n            data = series.datapoints.points;\r\n\r\n        generateBucketIndexes(series, start, end, width, buckets);\r\n\r\n        for (var i = 0; i < buckets.length; i += 2) {\r\n            minMaxForRange(data, buckets[i], buckets[i + 1] + 1, result);\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /* decimates a data series. If the x axis of the series is logarithmic this function calls decimate1DLog*/\r\n    NationalInstruments.HtmlVI.DataPipeline.decimate1D = function (series, start, end, buckets) {\r\n        var i,\r\n            index = 0,\r\n            iindex = 0,\r\n            length = 0,\r\n            step = buckets / (end - start),\r\n            data = series.datapoints.points,\r\n            res = [],\r\n            newBucket = true,\r\n            max = -Infinity, maxIndex = -1,\r\n            min = Infinity, minIndex = -1;\r\n\r\n        if (series.xaxis && series.xaxis.options.mode === 'log') {\r\n            return NationalInstruments.HtmlVI.DataPipeline.decimate1DLog(series, start, end, buckets);\r\n        }\r\n\r\n        var startIndex = Math.min(Math.max(0, Math.floor(start)), data.length / 2);\r\n        var endIndex = (end > 0) ? Math.min((data.length / 2), Math.floor(end + 2)) : 0;\r\n\r\n        var nextBucket = function () {\r\n            if (minIndex === maxIndex) {\r\n                res[iindex] = minIndex;\r\n                res[iindex + 1] = min;\r\n                iindex += 2;\r\n            } else {\r\n                if (minIndex < maxIndex) {\r\n                    res[iindex] = minIndex;\r\n                    res[iindex + 1] = min;\r\n                    res[iindex + 2] = maxIndex;\r\n                    res[iindex + 3] = max;\r\n                } else {\r\n                    res[iindex] = maxIndex;\r\n                    res[iindex + 1] = max;\r\n                    res[iindex + 2] = minIndex;\r\n                    res[iindex + 3] = min;\r\n                }\r\n                iindex += 4;\r\n            }\r\n        }\r\n\r\n        var prepareBucket = function () {\r\n            max = -Infinity;\r\n            maxIndex = -1;\r\n            min = Infinity;\r\n            minIndex = -1;\r\n        }\r\n\r\n        length = endIndex - startIndex;\r\n\r\n        if (buckets > length) {\r\n            step = 1;\r\n        }\r\n\r\n        for (i = startIndex * 2; i < endIndex * 2; i += 2) {\r\n            if (newBucket) {\r\n                prepareBucket();\r\n                newBucket = false;\r\n            }\r\n\r\n            if (data[i + 1] < min) {\r\n                minIndex = data[i];\r\n                min = data[i + 1];\r\n            }\r\n            if (data[i + 1] > max) {\r\n                maxIndex = data[i];\r\n                max = data[i + 1];\r\n            }\r\n\r\n            if (Math.floor(index) !== Math.floor(index + step)) {\r\n                nextBucket();\r\n                newBucket = true;\r\n            }\r\n\r\n            index += step;\r\n        }\r\n\r\n        if (!newBucket) {\r\n            nextBucket();\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline.decimatePoints = function (series, startX, endX, width, startY, endY, height) {\r\n        if (height == null || endY == null || startY == null || width == null || endX == null || startX == null) {\r\n            return series.datapoints.points;\r\n        }\r\n\r\n        if (startX > endX || startY > endY) {\r\n            return [];\r\n        }\r\n\r\n        if ((series.xaxis && series.xaxis.options.mode === 'log') || (series.yaxis && series.yaxis.options.mode === 'log')) {\r\n            return NationalInstruments.HtmlVI.DataPipeline.decimatePointsLog(series, startX, endX, width, startY, endY, height);\r\n        }\r\n\r\n        var verticalBucketStep = (endX - startX) / width,\r\n            horizontalBucketStep = (endY - startY) / height,\r\n            dataMatrix,\r\n            data = series.datapoints.points,\r\n            verticalBucketIndex, horizontalBucketIndex, i,\r\n            res = [];\r\n\r\n        dataMatrix = new Array(Math.ceil(width) * Math.ceil(height));\r\n\r\n        for (i = 0; i < data.length; i += 2) {\r\n            if (data[i] < startX || data[i + 1] < startY || data[i] > endX || data[i + 1] > endY) {\r\n                continue;\r\n            }\r\n            verticalBucketIndex = data[i] === startX ? 0 : Math.ceil((data[i] - startX) / verticalBucketStep - 1);\r\n            horizontalBucketIndex = data[i + 1] === startY ? 0 : Math.ceil((data[i + 1] - startY) / horizontalBucketStep - 1);\r\n            updatePointsResult(data, i, verticalBucketIndex, horizontalBucketIndex, width, dataMatrix, res);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline.decimatePointsLog = function (series, startX, endX, width, startY, endY, height) {\r\n        var dataMatrix,\r\n            data = series.datapoints.points,\r\n            verticalBucketIndex, horizontalBucketIndex, i,\r\n            res = [],\r\n            transformX = series.xaxis.options.transform || function (x) { return x; },\r\n            transformY = series.yaxis.options.transform || function (y) { return y; },\r\n            transformedStartX = transformX(startX),\r\n            transformedStartY = transformY(startY),\r\n            transformedEndX = transformX(endX),\r\n            transformedEndY = transformY(endY),\r\n            verticalBucketStep = (transformedEndX - transformedStartX) / width,\r\n            horizontalBucketStep = (transformedEndY - transformedStartY) / height,\r\n            transformedXValue, transformedYValue;\r\n\r\n        dataMatrix = new Array(Math.ceil(width) * Math.ceil(height));\r\n\r\n        for (i = 0; i < data.length; i += 2) {\r\n            if (data[i] < startX || data[i + 1] < startY || data[i] > endX || data[i + 1] > endY) {\r\n                continue;\r\n            }\r\n            transformedXValue = transformX(data[i]);\r\n            transformedYValue = transformY(data[i + 1]);\r\n            verticalBucketIndex = transformedXValue === transformedStartX ? 0 : Math.ceil((transformedXValue - transformedStartX) / verticalBucketStep - 1);\r\n            horizontalBucketIndex = transformedYValue === transformedStartY ? 0 : Math.ceil((transformedYValue - transformedStartY) / horizontalBucketStep - 1);\r\n            updatePointsResult(data, i, verticalBucketIndex, horizontalBucketIndex, width, dataMatrix, res);\r\n        }\r\n\r\n        return res;\r\n    }\r\n\r\n    function updatePointsResult(data, i, verticalBucketIndex, horizontalBucketIndex, width, dataMatrix, res) {\r\n        var matrixIndex = verticalBucketIndex + horizontalBucketIndex * width;\r\n        if (!dataMatrix[matrixIndex]) {\r\n            res.push(data[i])\r\n            res.push(data[i + 1]);\r\n            dataMatrix[matrixIndex] = true;\r\n        }\r\n    }\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline.decimateLinesXY = function (series, startX, endX, width, startY, endY, height) {\r\n        if (height == null || endY == null || startY == null || width == null || endX == null || startX == null) {\r\n            return series.datapoints.points;\r\n        }\r\n\r\n        if (startX > endX || startY > endY) {\r\n            return [];\r\n        }\r\n\r\n        if ((series.xaxis && series.xaxis.options.mode === 'log') || (series.yaxis && series.yaxis.options.mode === 'log')) {\r\n            return series.datapoints.points;\r\n        }\r\n\r\n        if (series.datapoints.points <= 4) {\r\n            return series.datapoints.points;\r\n        }\r\n\r\n        var verticalBucketStep = (endX - startX) / width,\r\n            horizontalBucketStep = (endY - startY) / height,\r\n            data = series.datapoints.points,\r\n            currentVerticalBucket, currentHorizontalBucket,\r\n            previousVerticalBucket, previousHorizontalBucket,\r\n            previousX, previousY, currentX, currentY, futureX, futureY,\r\n            i, res = [];\r\n\r\n        if (!(data[0] < startX || data[0] < startY || data[1] > endX || data[1] > endY) ||\r\n            isProbablyCrossingEdge(data[0], data[1], data[2], data[3], startX, endX, startY, endY) ||\r\n            !(data[2] < startX || data[3] < startY || data[2] > endX || data[3] > endY)) {\r\n            res.push(data[0]);\r\n            res.push(data[1]);\r\n        }\r\n\r\n        previousVerticalBucket = data[0] === startX ? 0 : Math.ceil((data[0] - startX) / verticalBucketStep - 1);\r\n        previousHorizontalBucket = data[1] === startY ? 0 : Math.ceil((data[1] - startY) / horizontalBucketStep - 1);\r\n        previousX = data[0];\r\n        previousY = data[1];\r\n\r\n        for (i = 2; i < data.length - 2; i += 2) {\r\n            currentX = data[i];\r\n            currentY = data[i + 1];\r\n            futureX = data[i + 2];\r\n            futureY = data[i + 3];\r\n\r\n            //check cases for point not visible\r\n            if (currentX < startX || currentY < startY || currentX > endX || currentY > endY) {\r\n                if (!(previousX < startX || previousY < startY || previousX > endX || previousY > endY) ||\r\n                    !(futureX < startX || futureY < startY || futureX > endX || futureY > endY) ||\r\n                    isProbablyCrossingEdge(previousX, previousY, currentX, currentY, startX, endX, startY, endY) ||\r\n                    isProbablyCrossingEdge(currentX, currentY, futureX, futureY, startX, endX, startY, endY)) {\r\n                    res.push(currentX);\r\n                    res.push(currentY);\r\n                }\r\n                previousX = currentX;\r\n                previousY = currentY;\r\n                previousVerticalBucket = currentX === startX ? 0 : Math.ceil((currentX - startX) / verticalBucketStep - 1);\r\n                previousHorizontalBucket = currentY === startY ? 0 : Math.ceil((currentY - startY) / horizontalBucketStep - 1);\r\n                continue;\r\n            }\r\n\r\n            currentVerticalBucket = currentX === startX ? 0 : Math.ceil((currentX - startX) / verticalBucketStep - 1);\r\n            currentHorizontalBucket = currentY === startY ? 0 : Math.ceil((currentY - startY) / horizontalBucketStep - 1);\r\n\r\n            if (previousHorizontalBucket === currentHorizontalBucket && previousVerticalBucket === currentVerticalBucket) {\r\n                continue;\r\n            }\r\n\r\n            //add data to result and update starting point of the edge\r\n            res.push(currentX);\r\n            res.push(currentY);\r\n            previousVerticalBucket = currentVerticalBucket;\r\n            previousHorizontalBucket = currentHorizontalBucket;\r\n            previousX = currentX;\r\n            previousY = currentY;\r\n        }\r\n\r\n        res.push(data[data.length - 2]);\r\n        res.push(data[data.length - 1]);\r\n\r\n        return res;\r\n    }\r\n\r\n    var isProbablyCrossingEdge = function(v1x, v1y, v2x, v2y, startX, endX, startY, endY) {\r\n        return (v1x < startX && v2x > startX) || (v1x > startX && v2x < startX) ||\r\n            (v1x < endX && v2x > endX) || (v1x > endX && v2x < endX) ||\r\n            (v1y < startY && v2y > startY) || (v1y > startY && v2y < startY) ||\r\n            (v1y < endY && v2y > endY) || (v1y > endY && v2y < endY);\r\n    }\r\n\r\n    // Make sure ArrayBuffer.isView is available\r\n    if (typeof ArrayBuffer.isView !== 'function') {\r\n        // is that you PhantomJS ?\r\n        ArrayBuffer.isView = function (data) {\r\n            var isViewToStrings = [\r\n                // The TypedArray types\r\n                '[object Int8Array]',\r\n                '[object Uint8Array]',\r\n                '[object Uint8ClampedArray]',\r\n                '[object Int16Array]',\r\n                '[object Uint16Array]',\r\n                '[object Int32Array]',\r\n                '[object Uint32Array]',\r\n                '[object Float32Array]',\r\n                '[object Float64Array]',\r\n                // The DataView type\r\n                '[object DataView]'\r\n            ];\r\n\r\n            var dataStr = Object.prototype.toString.call(data);\r\n\r\n            return isViewToStrings.indexOf(dataStr) !== -1;\r\n        }\r\n    }\r\n\r\n    var DataTypesEnum = Object.freeze({\r\n        niAnalogWaveform: 'niAnalogWaveform',\r\n        niAnalogWaveformArray: 'niAnalogWaveformArray',\r\n        XYClusterOfArrays: 'XYClusterOfArrays',\r\n        XYArrayOfClusters: 'XYArrayOfClusters',\r\n        XYArrayOfClusterOfArrays: 'XYArrayOfClusterOfArrays',\r\n        XYArrayOfArrayOfClusters: 'XYArrayOfArrayOfClusters',\r\n        XYArrayOfClusterOfArrayOfPoint: 'XYArrayOfClusterOfArrayOfPoint',\r\n        oneDimensionNumericArray: '1DNumericArray',\r\n        twoDimensionsNumericArray: '2DNumericArray',\r\n        oneDimensionComplexArray: '1DComplexArray',\r\n        twoDimensionsComplexArray: '2DComplexArray',\r\n        numeric: 'numeric',\r\n        clusterOfNumerics: 'clusterOfNumerics',\r\n        arrayOfClusterOfNumerics: 'arrayOfClusterOfNumerics',\r\n        historyBuffer: 'HistoryBuffer',\r\n        empty: 'empty',\r\n        unknown: 'unknown'\r\n    });\r\n    NationalInstruments.HtmlVI.DataPipeline.DataTypesEnum = DataTypesEnum;\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline.inferDataTypeFromNIType = function(niType) {\r\n        if (!(niType instanceof NIType)) {\r\n            return DataTypesEnum.unknown;\r\n        }\r\n        if (niType.getName() === NITypeNames.ANALOGWAVEFORM) {\r\n            return DataTypesEnum.niAnalogWaveform;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && niType.getSubtype().getName() === NITypeNames.ANALOGWAVEFORM) {\r\n            return DataTypesEnum.niAnalogWaveformArray;\r\n        }\r\n        if (isXYClusterOfArrays(niType)) {\r\n            return DataTypesEnum.XYClusterOfArrays;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && niType.getRank() === 1 && isXYCluster(niType.getSubtype())) {\r\n            return DataTypesEnum.XYArrayOfClusters;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && isXYClusterOfArrays(niType.getSubtype())) {\r\n            return DataTypesEnum.XYArrayOfClusterOfArrays;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && isXYClusterOfArrayOfPoint(niType.getSubtype())) {\r\n            return DataTypesEnum.XYArrayOfClusterOfArrayOfPoint;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && niType.getRank() === 2 && isXYCluster(niType.getSubtype())) {\r\n            return DataTypesEnum.XYArrayOfArrayOfClusters;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && niType.getRank() === 1 && (niType.getSubtype().isInteger() || niType.getSubtype().isFloat())) {\r\n            return DataTypesEnum.oneDimensionNumericArray;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && niType.getRank() === 2 && (niType.getSubtype().isInteger() || niType.getSubtype().isFloat())) {\r\n            return DataTypesEnum.twoDimensionsNumericArray;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && niType.getRank() === 1 && niType.getSubtype().isComplex()) {\r\n            return DataTypesEnum.oneDimensionComplexArray;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && niType.getRank() === 2 && niType.getSubtype().isComplex()) {\r\n            return DataTypesEnum.twoDimensionsComplexArray;\r\n        }\r\n        if (niType.isInteger() || niType.isFloat()) {\r\n            return DataTypesEnum.numeric;\r\n        }\r\n        if (isClusterOfNumerics(niType)) {\r\n            return DataTypesEnum.clusterOfNumerics;\r\n        }\r\n        if (niType.getName() === NITypeNames.ARRAY && isClusterOfNumerics(niType.getSubtype())) {\r\n            return DataTypesEnum.arrayOfClusterOfNumerics;\r\n        }\r\n        return DataTypesEnum.unknown;\r\n    }\r\n\r\n    function isXYClusterOfArrays(niType) {\r\n        return niType.getName() === NITypeNames.CLUSTER &&\r\n            niType.getFields().length === 2 &&\r\n            niType.getSubtype().length === 2 &&\r\n            niType.getSubtype()[0].getName() === NITypeNames.ARRAY &&\r\n            niType.getSubtype()[1].getName() === NITypeNames.ARRAY;\r\n    }\r\n\r\n    function isXYClusterOfArrayOfPoint(niType) {\r\n        return niType.getName() === NITypeNames.CLUSTER &&\r\n            niType.getFields().length === 1 &&\r\n            niType.getSubtype()[0].getName() === NITypeNames.ARRAY &&\r\n            isXYCluster(niType.getSubtype()[0].getSubtype());\r\n    }\r\n\r\n    function isXYCluster(niType) {\r\n        return niType.getName() === NITypeNames.CLUSTER &&\r\n            niType.getFields().length === 2 &&\r\n            niType.getSubtype().length === 2 &&\r\n            niType.getSubtype().every(function(st) {\r\n                return st.isInteger() || st.isFloat() || st.isTimeStamp();\r\n            });\r\n    }\r\n\r\n    function isClusterOfNumerics(niType) {\r\n        return niType.getName() === NITypeNames.CLUSTER &&\r\n            niType.getSubtype().every(function(st) {\r\n                return st.isInteger() || st.isFloat();\r\n            });\r\n    }\r\n}());\r\n","/**\r\n# TypedHistoryBuffer\r\n\r\nA TypedHistoryBuffer is a HistoryBuffer with information about the data type\r\nof the values being pushed to it.\r\n\r\nThe data type is used exclusively for optimizing the push of new data into the buffer operation.\r\n\r\nExample:\r\n```javascript\r\nvar hb1 = new TypedHistoryBuffer(1024);\r\n\r\nhb1.setNIType(NITypes.DOUBLE.makeArray());\r\n\r\nhb1.pushTypedData([1, 2]);\r\nhb1.pushTypedData([3, 4, 5]);\r\n\r\nconsole.log(hb1.toArray()); //[1, 2, 3, 4, 5]\r\n```\r\n\r\nTypedHistoryBuffer with width = 2:\r\n```javascript\r\nvar hb1 = new TypedHistoryBuffer(1024, 2);\r\n\r\nhb1.setNIType(NITypes.DOUBLE.makeArray(2));\r\n\r\nhb1.pushTypedData([[1, 11], [2, 22]]);\r\nhb1.pushTypedData([[3, 33], [4, 44], [5, 55]]);\r\n\r\nconsole.log(hb1.toArray()); //[[1, 11], [2, 22], [3, 33], [4, 44], [5, 55]]\r\n```\r\n\r\n*/\r\n\r\n/** ## TypedHistoryBuffer methods*/\r\n(function () {\r\n    'use strict';\r\n\r\n    var DataPipeline = NationalInstruments.HtmlVI.DataPipeline;\r\n    var DataTypesEnum = NationalInstruments.HtmlVI.DataPipeline.DataTypesEnum;\r\n\r\n    /** **TypedHistoryBuffer(capacity, width)** - the History buffer constructor creates\r\n    a new history buffer with the specified capacity (default: 1024) and width (default: 1).\r\n    The data type is set to unkown. */\r\n    NationalInstruments.HtmlVI.DataPipeline.TypedHistoryBuffer = function () {\r\n        HistoryBuffer.apply(this, arguments);\r\n        this.niType = null;\r\n        this.valueType = DataTypesEnum.unknown;\r\n    }\r\n\r\n    var TypedHistoryBuffer = NationalInstruments.HtmlVI.DataPipeline.TypedHistoryBuffer;\r\n\r\n    TypedHistoryBuffer.prototype = new HistoryBuffer(arguments);\r\n\r\n    /** **setNItype(niType)** - sets the data type of the values being pushed.\r\n        Supported data types:\r\n        * any numeric type\r\n        * one dimension numeric arrays\r\n        * two dimensions numeric arrays\r\n        * clusters of numerics\r\n        * array of clusters of numerics\r\n     */\r\n    TypedHistoryBuffer.prototype.setNIType = function(niType) {\r\n        var width;\r\n        this.niType = niType;\r\n        this.valueType = DataPipeline.inferDataTypeFromNIType(this.niType);\r\n        this.clear();\r\n\r\n        switch (this.valueType) {\r\n            case DataTypesEnum.numeric:\r\n            case DataTypesEnum.oneDimensionNumericArray:\r\n                this.setType('numeric');\r\n                this.setWidth(1);\r\n                break;\r\n            case DataTypesEnum.clusterOfNumerics:\r\n                this.setType('numeric');\r\n                width = this.niType.getFields().length;\r\n\r\n                if (width === 0) {\r\n                    return;\r\n                }\r\n\r\n                this.setWidth(width);\r\n                break;\r\n            case DataTypesEnum.arrayOfClusterOfNumerics:\r\n            case DataTypesEnum.XYArrayOfClusters:\r\n                width = this.niType.getSubtype().getFields().length\r\n\r\n                if (width === 0) {\r\n                    return;\r\n                }\r\n\r\n                this.setWidth(width);\r\n                break;\r\n            case DataTypesEnum.niAnalogWaveform:\r\n                this.setType('analogWaveform');\r\n                this.setWidth(1);\r\n                break;\r\n            case DataTypesEnum.niAnalogWaveformArray:\r\n                this.setType('analogWaveform');\r\n                this.setWidth(1);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** **pushTypedData(value)** - pushes a new value to the history buffer */\r\n    TypedHistoryBuffer.prototype.pushTypedData = function(value) {\r\n        var i, j, row, keys, width;\r\n        switch (this.valueType) {\r\n            case DataTypesEnum.numeric:\r\n                this.push(value);\r\n                break;\r\n            case DataTypesEnum.oneDimensionNumericArray:\r\n                this.appendArray(value);\r\n                break;\r\n            case DataTypesEnum.niAnalogWaveform:\r\n                this.push(value);\r\n                break;\r\n            case DataTypesEnum.niAnalogWaveformArray:\r\n                width = value.length;\r\n\r\n                if (width === 0) {\r\n                    // empty array, nothing to push, can't set the width to 0 so don't do anything\r\n                    return;\r\n                }\r\n                this.setWidth(value.length);\r\n                this.push(value);\r\n                break;\r\n            case DataTypesEnum.twoDimensionsNumericArray:\r\n                width = value[0].length;\r\n\r\n                if (width === 0) {\r\n                    // empty array, nothing to push, can't set the width to 0 so don't do anything\r\n                    return;\r\n                }\r\n\r\n                this.setWidth(width);\r\n                for (i = 0; i < value.length; i++) {\r\n                    this.push(value[i]);\r\n                }\r\n                break;\r\n            case DataTypesEnum.clusterOfNumerics:\r\n                row = [];\r\n                keys = Object.keys(value);\r\n                for (i = 0; i < keys.length; i++) {\r\n                    row[i] = value[keys[i]];\r\n                }\r\n                this.push(row);\r\n                break;\r\n            case DataTypesEnum.arrayOfClusterOfNumerics:\r\n            case DataTypesEnum.XYArrayOfClusters:\r\n                for (j = 0; j < value.length; j++) {\r\n                    row = [];\r\n                    keys = Object.keys(value[j]);\r\n                    for (i = 0; i < keys.length; i++) {\r\n                        row[i] = value[j][keys[i]];\r\n                    }\r\n                    this.push(row);\r\n                }\r\n                break;\r\n        }\r\n    }\r\n}());\r\n","//****************************************\r\n// GraphDataPipeline\r\n// Utility functions that convert LabVIEW datatypes allowed for graphs to flot data series\r\n// National Instruments Copyright 2016\r\n//****************************************\r\n\r\n/**\r\n## Data types supported by the ni-cartesian-graph\r\n\r\nData can be passed to a graph either through writing to the element value\r\nproperty or using API access (the setData() method on the element).\r\n\r\nHere is a list of supported data types:\r\n*/\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    // Static private reference aliases\r\n    // None\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline.GraphDataPipeline = function () {\r\n        // Private variables\r\n    };\r\n\r\n    var DataTypesEnum = NationalInstruments.HtmlVI.DataPipeline.DataTypesEnum;\r\n    var graphDataPipeline = NationalInstruments.HtmlVI.DataPipeline.GraphDataPipeline;\r\n    var ComplexNumber = window.NIComplex || NationalInstruments.HtmlVI.NIComplex;\r\n    var AnalogWaveform = window.NIAnalogWaveform || NationalInstruments.HtmlVI.NIAnalogWaveform;\r\n    var TimeStamp = window.NITimestamp || NationalInstruments.HtmlVI.NITimestamp;\r\n\r\n    var proto = graphDataPipeline.prototype;\r\n\r\n    // Public prototype methods\r\n    proto.toFlot = function (graph, value, valueType) {\r\n        return convertToFlotFormat(graph, value, valueType);\r\n    };\r\n\r\n    var isTimeStampValue = function(value) {\r\n        if (typeof value !== \"string\") {\r\n            return false;\r\n        }\r\n\r\n        var timeStamp = new TimeStamp(value);\r\n        return !isNaN(timeStamp.seconds) && !isNaN(timeStamp.fractions);\r\n    }\r\n\r\n    // Private methods\r\n    var isWaveform = function (value) {\r\n        return (!Array.isArray(value)) && typeof value === 'object' && Array.isArray(value.Y);\r\n    };\r\n\r\n    var isWaveformArray = function (value) {\r\n        return (Array.isArray(value)) && isWaveform(value[0]);\r\n    };\r\n\r\n    var isXYClusterOfArrays = function (value) {\r\n        return (!Array.isArray(value)) && typeof value === 'object' &&\r\n            Object.keys(value).length === 2 &&\r\n            Object.keys(value).every(function (key) {\r\n                return Array.isArray(value[key]);\r\n            });\r\n    };\r\n\r\n    var isXYArrayOfClusters = function (value) {\r\n        return (Array.isArray(value)) && (!Array.isArray(value[0])) &&\r\n            typeof value[0] === 'object' && Object.keys(value[0]).length === 2 &&\r\n            (typeof value[0][Object.keys(value[0])[0]] === 'number' || isTimeStampValue(value[0][Object.keys(value[0])[0]]));\r\n    };\r\n\r\n    var isXYClusterOfArrayOfPoint = function (value) {\r\n        return !Array.isArray(value) && typeof value === 'object' &&\r\n            Object.keys(value).length === 1 &&\r\n            isXYArrayOfClusters(value[Object.keys(value)[0]]);\r\n    };\r\n\r\n    var isXYArrayOfClusterOfArrays = function (value) {\r\n        return Array.isArray(value) && isXYClusterOfArrays(value[0]);\r\n    };\r\n\r\n    var isXYArrayOfArrayOfClusters = function (value) {\r\n        return Array.isArray(value) && isXYArrayOfClusters(value[0]);\r\n    };\r\n\r\n    var isXYArrayOfClusterOfArrayOfPoint = function (value) {\r\n        return Array.isArray(value) && isXYClusterOfArrayOfPoint(value[0]);\r\n    };\r\n\r\n    var is1DComplexArray = function (value) {\r\n        return Array.isArray(value) &&\r\n        (typeof value[0] === 'string' || value[0] instanceof ComplexNumber);\r\n    };\r\n\r\n    var is2DComplexArray = function (value) {\r\n        return Array.isArray(value) && Array.isArray(value[0]) &&\r\n        (typeof value[0][0] === 'string' || value[0][0] instanceof ComplexNumber);\r\n    };\r\n\r\n    var inferDataType = function (data) {\r\n        if (isWaveform(data)) {\r\n            return DataTypesEnum.niAnalogWaveform;\r\n        }\r\n\r\n        if (isWaveformArray(data)) {\r\n            return DataTypesEnum.niAnalogWaveformArray;\r\n        }\r\n\r\n        if (isXYClusterOfArrays(data)) {\r\n            return DataTypesEnum.XYClusterOfArrays;\r\n        }\r\n\r\n        if (isXYArrayOfClusters(data)) {\r\n            return DataTypesEnum.XYArrayOfClusters;\r\n        }\r\n\r\n        if (data.valueType === 'HistoryBuffer') {\r\n            return DataTypesEnum.historyBuffer;\r\n        }\r\n\r\n        if (!(Array.isArray(data) || ArrayBuffer.isView(data))) {\r\n            return DataTypesEnum.unknown;\r\n        }\r\n\r\n        if (data.length === 0) {\r\n            return DataTypesEnum.empty;\r\n        }\r\n\r\n        if (typeof data[0] === 'number') {\r\n            return DataTypesEnum.oneDimensionNumericArray;\r\n        }\r\n\r\n        if (isXYArrayOfClusterOfArrays(data)) {\r\n            return DataTypesEnum.XYArrayOfClusterOfArrays;\r\n        }\r\n\r\n        if (isXYArrayOfArrayOfClusters(data)) {\r\n            return DataTypesEnum.XYArrayOfArrayOfClusters;\r\n        }\r\n\r\n        if (isXYArrayOfClusterOfArrayOfPoint(data)) {\r\n            return DataTypesEnum.XYArrayOfClusterOfArrayOfPoint;\r\n        }\r\n\r\n        if (is1DComplexArray(data)) {\r\n            return DataTypesEnum.oneDimensionComplexArray;\r\n        }\r\n\r\n        if (is2DComplexArray(data)) {\r\n            return DataTypesEnum.twoDimensionsComplexArray;\r\n        }\r\n\r\n        if (Array.isArray(data[0]) || ArrayBuffer.isView(data[0])) {\r\n            return DataTypesEnum.twoDimensionsNumericArray;\r\n        }\r\n\r\n        return DataTypesEnum.unknown;\r\n    };\r\n\r\n    proto.inferDataType = inferDataType;\r\n\r\n    var waveformToFlotFormat = function (waveform) {\r\n        return {flatdata: true,\r\n            data: waveform.Y,\r\n            start: waveform.t0.valueOf(),\r\n            step: waveform.dt,\r\n            decimate: NationalInstruments.HtmlVI.DataPipeline.decimateAW,\r\n            decimatePoints: NationalInstruments.HtmlVI.DataPipeline.decimatePoints};\r\n    };\r\n\r\n    var xyClusterOfArraysToFlotFormat = function (xydata) {\r\n        var result = [];\r\n        var keys = Object.keys(xydata);\r\n        var count = Math.min(xydata[keys[0]].length, xydata[keys[1]].length);\r\n\r\n        for (var i = 0; i < count; i++) {\r\n            result.push([xydata[keys[0]][i], xydata[keys[1]][i]]);\r\n        }\r\n\r\n        return {data: result,\r\n            decimate: NationalInstruments.HtmlVI.DataPipeline.decimateLinesXY,\r\n            decimatePoints: NationalInstruments.HtmlVI.DataPipeline.decimatePoints\r\n        };\r\n    };\r\n\r\n    var xyClusterOfArrayOfPointToFlotFormat = function (xydata) {\r\n        const result = [];\r\n        const keys = Object.keys(xydata);\r\n        const array = xydata[keys[0]];\r\n        const count = array.length;\r\n\r\n        for (var i = 0; i < count; i++) {\r\n            const pointData = array[i];\r\n            var pointKeys = Object.keys(pointData);\r\n            result.push([pointData[pointKeys[0]], pointData[pointKeys[1]]]);\r\n        }\r\n\r\n        return {data: result,\r\n            decimate: NationalInstruments.HtmlVI.DataPipeline.decimateLinesXY,\r\n            decimatePoints: NationalInstruments.HtmlVI.DataPipeline.decimatePoints\r\n        };\r\n    };\r\n\r\n    var xyArrayOfClustersToFlotFormat = function (xydata) {\r\n        var result = [];\r\n\r\n        var keys = Object.keys(xydata[0] || {});\r\n\r\n        var convertTimeToNumberFunc = function(timeData) {\r\n            return new TimeStamp(timeData).valueOf();\r\n        }\r\n\r\n        var noOpFunc = function(numberData) {\r\n            return numberData;\r\n        }\r\n\r\n        var xConversionFunc = xydata.length > 0 && isTimeStampValue(xydata[0][keys[0]]) ? convertTimeToNumberFunc : noOpFunc;\r\n        var yConversionFunc = xydata.length > 0 && isTimeStampValue(xydata[0][keys[1]]) ? convertTimeToNumberFunc : noOpFunc;\r\n\r\n        for (var i = 0; i < xydata.length; i++) {\r\n            result.push([xConversionFunc(xydata[i][keys[0]]), yConversionFunc(xydata[i][keys[1]])]);\r\n        }\r\n\r\n        return {data: result,\r\n            decimate: NationalInstruments.HtmlVI.DataPipeline.decimateLinesXY,\r\n            decimatePoints: NationalInstruments.HtmlVI.DataPipeline.decimatePoints\r\n        };\r\n    };\r\n\r\n    var xyArrayOfClusterOfArrayOfPointToFlotFormat = function (xyDataArray) {\r\n        return xyDataArray.map(xydata =>\r\n            xyClusterOfArrayOfPointToFlotFormat(xydata));\r\n    };\r\n\r\n    var xyArrayOfClusterOfArraysToFlotFormat = function (xyDataArray) {\r\n        return xyDataArray.map(xydata =>\r\n            xyClusterOfArraysToFlotFormat(xydata));\r\n    };\r\n\r\n    var xyArrayOfArrayOfClustersToFlotFormat = function (xyDataArray) {\r\n        return xyDataArray.map(xydata =>\r\n            xyArrayOfClustersToFlotFormat(xydata));\r\n    };\r\n\r\n    var convertToFlotFormat = function (graph, data, valueType) {\r\n        // jshint unused: vars\r\n        var dataValuesArray = [];\r\n        var dataValuesArray2D, waveform;\r\n        var dataType = (valueType && valueType !== DataTypesEnum.unknown)\r\n            ? valueType\r\n            : inferDataType(data);\r\n\r\n        var i, j;\r\n\r\n        switch (dataType) {\r\n            /**\r\n            * **A 1D array of numerics**\r\n            ```js\r\n            [a1, a2, a3]\r\n            ```\r\n            Will be drawn as a single plot. It's an efficient and fast way to\r\n            pass data to the graph.\r\n\r\n            A typed array view is also allowed.\r\n            */\r\n            case DataTypesEnum.oneDimensionNumericArray:\r\n                return [{flatdata: true,\r\n                    data: data,\r\n                    start: 0,\r\n                    step: 1,\r\n                    decimate: NationalInstruments.HtmlVI.DataPipeline.decimate1D,\r\n                    decimatePoints: NationalInstruments.HtmlVI.DataPipeline.decimatePoints}];\r\n\r\n            /**\r\n            * **A 2D array of numerics**\r\n            ```js\r\n            [[a1, a2, a3], [b1, b2, b3]]\r\n            ```\r\n            Will be drawn as multiple plots. It's an efficient and fast way to\r\n            pass data to the graph.\r\n\r\n            An array of typed array views is also allowed.\r\n            */\r\n            case DataTypesEnum.twoDimensionsNumericArray:\r\n                dataValuesArray2D = [];\r\n                for (j = 0; j < data.length; j++) {\r\n                    dataValuesArray = [];\r\n\r\n                    dataValuesArray2D.push({flatdata: true,\r\n                        start: 0,\r\n                        step: 1,\r\n                        data: data[j],\r\n                        decimate: NationalInstruments.HtmlVI.DataPipeline.decimate1D,\r\n                        decimatePoints: NationalInstruments.HtmlVI.DataPipeline.decimatePoints});\r\n                }\r\n\r\n                return dataValuesArray2D;\r\n\r\n            /**\r\n            * **An analogWaveform**\r\n            ```js\r\n            var data = new NIAnalogWaveform({\r\n                t0: new NITimestamp(),\r\n                dt: 0.001, // 1 ms\r\n                Y: [a1, a2, a3]\r\n            });\r\n            ```\r\n            Will be drawn as a single plot. It's an\r\n            efficient and fast way to pass data to the graph\r\n            */\r\n            case DataTypesEnum.niAnalogWaveform:\r\n                if (data instanceof AnalogWaveform) {\r\n                    waveform = data;\r\n                } else {\r\n                    waveform = new AnalogWaveform(data);\r\n                }\r\n                if (typeof waveform.channelName === 'string' && waveform.channelName.length > 0) {\r\n                    graph.updatePlotName(0, waveform.channelName);\r\n                }\r\n\r\n                return [waveformToFlotFormat(waveform)];\r\n\r\n            /**\r\n            * **An array of analogWaveforms**\r\n            ```js\r\n            var aw0 = new NIAnalogWaveform({\r\n                t0: new NITimestamp(),\r\n                dt: 0.001, // 1 ms\r\n                Y: [a1, a2, a3]\r\n            });\r\n            var aw1 = new NIAnalogWaveform({\r\n                t0: new NITimestamp(),\r\n                dt: 0.001, // 1 ms\r\n                Y: [b1, b2, b3]\r\n            });\r\n            var data = [aw0, aw1];\r\n            ```\r\n            Will be drawn as multiple plots. It's an efficient and fast way to\r\n            pass data to the graph.\r\n            */\r\n            case DataTypesEnum.niAnalogWaveformArray:\r\n                dataValuesArray2D = [];\r\n                for (j = 0; j < data.length; j++) {\r\n                    if (data[j] instanceof AnalogWaveform) {\r\n                        waveform = data[j];\r\n                    } else {\r\n                        waveform = new AnalogWaveform(data[j]);\r\n                    }\r\n                    if (typeof waveform.channelName === 'string' && waveform.channelName.length > 0) {\r\n                        graph.updatePlotName(j, waveform.channelName);\r\n                    }\r\n\r\n                    dataValuesArray2D.push(waveformToFlotFormat(waveform));\r\n                }\r\n\r\n                return dataValuesArray2D;\r\n\r\n            /**\r\n            * **An object (cluster) of arrays**\r\n            ```js\r\n            var data = {a: [a1, a2, a3], b: [b1, b2, b3]};\r\n            ```\r\n             Will be drawn as a single XY plot,\r\n            the first array will hold the X coordinates and the second the Y\r\n            coordinates. This format is only recomended when you want to display\r\n            XY data, it's not particulary efficient or fast.\r\n            */\r\n            case DataTypesEnum.XYClusterOfArrays:\r\n                return [xyClusterOfArraysToFlotFormat(data)];\r\n\r\n            /**\r\n            * **An array of objects (clusters) of arrays**\r\n            ```js\r\n            var data = [\r\n                {a: [a1, a2, a3], b: [b1, b2, b3]},\r\n                {c: [c1, c2, c3], d: [d1, d2, d3]}\r\n            ];\r\n            ```\r\n            Will be drawn as multiple XY plots, the first array in the object\r\n            (cluster) will hold the X coordinates and the second the Y coordinates.\r\n            This format is only recomended when you want to display XY data,\r\n            it's not particulary efficient or fast.\r\n            */\r\n            case DataTypesEnum.XYArrayOfClusterOfArrays:\r\n                return xyArrayOfClusterOfArraysToFlotFormat(data);\r\n\r\n            /**\r\n            * **An array of objects (clusters)**\r\n            ```js\r\n            var data = [\r\n                {x: a1, y: b1},\r\n                {x: a2, y: b2},\r\n                {x: a3, y: b3},\r\n            ];\r\n            ```\r\n            Will be drawn as a single XY plot, the first element in the cluster\r\n            will hold the X coordinates and the second the Y coordinates. This\r\n            format is only recomended when you want to display XY data, it's not\r\n            particulary efficient or fast.\r\n            */\r\n            case DataTypesEnum.XYArrayOfClusters:\r\n                return [xyArrayOfClustersToFlotFormat(data)];\r\n\r\n            /**\r\n            * **An array of array of objects (clusters)**\r\n            ```js\r\n            var data = [\r\n                [{x: a1, y: b1}, {x: a2, y: b2}, {x: a3, y: b3}],\r\n                [{x: c1, y: d1}, {x: c2, y: d2}, {x: c3, y: d3}]\r\n            ];\r\n            ```\r\n            Will be drawn as multiple XY plots, the first element in the cluster\r\n            will hold the X coordinates and the second the Y coordinates. This\r\n            format is only recomended when you want to display XY data, it's not\r\n            particulary efficient or fast.\r\n            */\r\n            case DataTypesEnum.XYArrayOfArrayOfClusters:\r\n                return xyArrayOfArrayOfClustersToFlotFormat(data);\r\n\r\n            /**\r\n            * **An array of a cluster of an array of points (clusters)**\r\n            ```js\r\n            var data = [\r\n                { [ {x: a1, y: b1}, {x: a2, y: b2}, {x: a3, y: b3} ] },\r\n                { [ {x: c1, y: d1}, {x: c2, y: d2}, {x: c3, y: d3} ] }\r\n            ];\r\n            ```\r\n            Will be drawn as multiple XY plots. Each element in the array is\r\n            a cluster that holds on to an array of points (i.e. a cluster of\r\n            two numeric values). This format is only recomended when you want\r\n            to display XY data, it's not particulary efficient or fast.\r\n            */\r\n            case DataTypesEnum.XYArrayOfClusterOfArrayOfPoint:\r\n                return xyArrayOfClusterOfArrayOfPointToFlotFormat(data);\r\n\r\n            /**\r\n            * **An 1D array of Complex Numbers**\r\n            ```js\r\n            var a1 = new NIComplex(1, 2);\r\n            var a2 = new NIComplex(2, 3);\r\n            var a3 = new NIComplex(3, 4);\r\n            var data = [a1, a2, a3]; // array of complex numbers\r\n            var data2 = ['1+2i', '2+3i', '3+4i']; // also accepted as input\r\n            ```\r\n            Will be drawn as a single plot.\r\n            */\r\n            case DataTypesEnum.oneDimensionComplexArray:\r\n                for (i = 0; i < data.length; i++) {\r\n                    dataValuesArray.push(ComplexNumber.prototype.parseFromString(data[i]));\r\n                }\r\n\r\n                return [dataValuesArray];\r\n\r\n            /**\r\n            * **A 2D array of Complex Numbers**\r\n            ```js\r\n            var a1 = new NIComplex(1, 2);\r\n            var a2 = new NIComplex(2, 3);\r\n            var b1 = new NIComplex(3, 4);\r\n            var b2 = new NIComplex(4, 5);\r\n            var data = [[a1, a2], [b1, b2]]; // arrays of complex numbers\r\n            var data2 = [['1+2i', '2+3i'], ['3+4i', '4+5i']]; // also accepted as input\r\n            ```\r\n            Will be drawn as multiple plots.\r\n            */\r\n            case DataTypesEnum.twoDimensionsComplexArray:\r\n                dataValuesArray2D = [];\r\n                for (j = 0; j < data.length; j++) {\r\n                    dataValuesArray = [];\r\n                    for (i = 0; i < data[j].length; i++) {\r\n                        dataValuesArray.push(ComplexNumber.prototype.parseFromString(data[j][i]));\r\n                    }\r\n\r\n                    dataValuesArray2D.push(dataValuesArray);\r\n                }\r\n\r\n                return dataValuesArray2D;\r\n            default:\r\n        }\r\n\r\n        return dataValuesArray2D || [dataValuesArray];\r\n    };\r\n}());\r\n","//****************************************\r\n// ChartDataPipeline\r\n// Utility functions that load LabVIEW datatypes allowed for charts into history\r\n// buffers\r\n// National Instruments Copyright 2016\r\n//****************************************\r\n\r\n(function () {\r\n    'use strict';\r\n\r\n    NationalInstruments.HtmlVI.DataPipeline.ChartDataPipeline = function () {\r\n        // Private variables\r\n    };\r\n\r\n    var graphDataPipeline = NationalInstruments.HtmlVI.DataPipeline.GraphDataPipeline;\r\n\r\n    var proto = NationalInstruments.HtmlVI.DataPipeline.ChartDataPipeline.prototype;\r\n\r\n    // Public prototype methods\r\n    proto.loadValueIntoHistoryBuffer = function (value, historyBuffer) {\r\n        switch (graphDataPipeline.prototype.inferDataType(value)) {\r\n            case '1DNumericArray':\r\n                historyBuffer.appendArray(value);\r\n                break;\r\n            case '2DNumericArray':\r\n                pushBuffersToHistoryBuffer(historyBuffer, value);\r\n                break;\r\n            case 'HistoryBuffer':\r\n                pushBuffersToHistoryBuffer(historyBuffer, value.data);\r\n                break;\r\n            case 'empty':\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    };\r\n\r\n    function pushBuffersToHistoryBuffer(historyBuffer, buffers) {\r\n        var width = buffers.length;\r\n        if (width === 0) {\r\n            // no data\r\n            return;\r\n        }\r\n        historyBuffer.setWidth(width);\r\n        for (var i = 0; i < buffers[0].length; i++) {\r\n            var col = [];\r\n            for (var j = 0; j < width; j++) {\r\n                col[j] = buffers[j][i];\r\n            }\r\n            historyBuffer.push(col);\r\n        }\r\n    }\r\n\r\n    proto.toFlot = function (chart, value, valueType) {\r\n        // the chart is not using the element value as data, but the history buffer.\r\n        // We return an array of empty data series with the length equal with the\r\n        // width of the history buffer\r\n        var res = [];\r\n        var width = chart.historyBuffer.width;\r\n        for (var i = 0; i < width; i++) {\r\n            res[i] = [];\r\n        }\r\n        return res;\r\n    }\r\n}());\r\n","(function() {\r\n    'use strict';\r\n\r\n    var NINumericFormatters = window.NINumericFormatters;\r\n\r\n    // 'LVRelativeSeconds:Gx' or LVRelativeSeconds:0.##...#\r\n    // Ex: 'LVRelativeSeconds:N4'\r\n    // where N represents the Fixed Notation,\r\n    // G represents the Significant Digits Precision and\r\n    // x is a number representing the number of decimals/digits\r\n    var parseTickFormatterType = function(format) {\r\n        var colonMarkIndex, decimals, g, n,\r\n            unknownFormat = { type: 'default' },\r\n            parsedFormat = unknownFormat;\r\n\r\n        if (format.indexOf('LVSI') === 0) {\r\n            colonMarkIndex = 5;\r\n            var formatSubstring = format.slice(colonMarkIndex);\r\n            if (formatSubstring.indexOf('G') === -1 && formatSubstring.indexOf('N') === -1) {\r\n                if (formatSubstring.indexOf('#') !== -1 && formatSubstring.lastIndexOf('#') === formatSubstring.length - 1) {\r\n                    decimals = formatSubstring.lastIndexOf('#') - formatSubstring.indexOf('#') + 1;\r\n                    parsedFormat = { type: 'si', N: false, G: false, decimals: decimals };\r\n                } else if (formatSubstring === '0') {\r\n                    parsedFormat = { type: 'si', N: false, G: false, decimals: 0 };\r\n                } else {\r\n                    parsedFormat = { type: 'si', N: false, G: false, decimals: null };\r\n                }\r\n            } else {\r\n                decimals = parseInt(formatSubstring.slice(1));\r\n                n = formatSubstring.indexOf('N') === 0;\r\n                g = formatSubstring.indexOf('G') === 0;\r\n                parsedFormat = { type: 'si', N: n, G: g, decimals: decimals };\r\n            }\r\n        }\r\n\r\n        if (format.indexOf('LVRelativeSeconds') === 0) {\r\n            colonMarkIndex = 18;\r\n            var decFormatTypeSubstring = format.slice(colonMarkIndex);\r\n\r\n            if (decFormatTypeSubstring.indexOf('G') === -1 && decFormatTypeSubstring.indexOf('N') === -1) {\r\n                if (decFormatTypeSubstring.lastIndexOf('#') !== -1 && decFormatTypeSubstring.lastIndexOf('#') === decFormatTypeSubstring.length - 1) {\r\n                    decimals = decFormatTypeSubstring.lastIndexOf('#') - decFormatTypeSubstring.indexOf('#') + 1;\r\n                    parsedFormat = { type: 'dec', N: false, G: false, decimals: decimals };\r\n                } else if (decFormatTypeSubstring === '0') {\r\n                    parsedFormat = { type: 'dec', N: false, G: false, decimals: 0 };\r\n                } else {\r\n                    parsedFormat = unknownFormat;\r\n                }\r\n            } else {\r\n                decimals = parseInt(decFormatTypeSubstring.slice(1));\r\n                n = decFormatTypeSubstring.indexOf('N') === 0;\r\n                g = decFormatTypeSubstring.indexOf('G') === 0;\r\n                parsedFormat = { type: 'dec', N: n, G: g, decimals: g ? Math.min(decimals, 21) : decimals };\r\n            }\r\n        }\r\n\r\n        return parsedFormat;\r\n    };\r\n\r\n    var getTickFormatter = function(format) {\r\n        if (format.type === 'si' && format.G) {\r\n            return getSiSignificatDigitsFormatter(format);\r\n        } else if (format.type === 'si' && format.N) {\r\n            return getSiDecimalFormatter(format);\r\n        } else if (format.type === 'si' && typeof format.decimals === 'number') {\r\n            return getSiDecimalFormatter(format);\r\n        } else if (format.type === 'si' && format.decimals === null) {\r\n            return siTickFormatter;\r\n        } else if (format.type === 'dec' && format.G) {\r\n            return getDecPrecisionNotationFormatter(format.decimals);\r\n        } else if (format.type === 'dec' && format.N) {\r\n            return getDecFixedNotationFormatter(format.decimals);\r\n        } else if (format.type === 'dec' && format.decimals === 0) {\r\n            return getDecFixedNotationFormatter(0, true);\r\n        } else if (format.type === 'dec' && format.decimals >= 1) {\r\n            return getDecFixedNotationFormatter(format.decimals);\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    var getSiSignificatDigitsFormatter = function(format) {\r\n        return function siSignificantDigitsFormatter(num) {\r\n            var siValue = NINumericFormatters.prototype.toSiNotation(num, format.decimals),\r\n                value, extension;\r\n            if (isNaN(Number(siValue))) {\r\n                value = Number(siValue.slice(0, siValue.length - 1));\r\n                extension = siValue.slice(siValue.length - 1);\r\n            } else {\r\n                value = Number(siValue);\r\n                extension = '';\r\n            }\r\n            return NINumericFormatters.prototype.toDecPrecisionNotation(value, Math.min(format.decimals, 21)) + extension;\r\n        };\r\n    };\r\n\r\n    var getSiDecimalFormatter = function(format) {\r\n        return function siDecimalFormatter(num) {\r\n            return NINumericFormatters.prototype.toSiNotation(num, format.decimals);\r\n        };\r\n    };\r\n\r\n    var siTickFormatter = function (num, axis, precision, plot) {\r\n        var decimals = axis.tickDecimals,\r\n            log10AxisMin, croppedMin, croppedMax;\r\n\r\n        if (axis.tickDecimals !== axis.options.tickDecimals) {\r\n            // we recompute the precision given by flot by considering another axis range.\r\n            // For example, if axis.min=1000 and axis.max=1200 we recompute the numbers of ticks for min=1 and max=1.2 which gives us 2 decimals needed instead of 0\r\n            croppedMin = computeCroppedValue(axis.min);\r\n            log10AxisMin = axis.min !== 0 ? Math.floor(Math.log(Math.abs(axis.min)) * Math.LOG10E) : 0;\r\n            croppedMax = computeCroppedValue(axis.max, log10AxisMin);\r\n\r\n            decimals = num !== 0 ? Math.abs(plot.computeValuePrecision(croppedMin, croppedMax, axis.direction, axis.options.ticks)) : 0;\r\n        }\r\n\r\n        if (precision) {\r\n            var precisionDecimals = Math.abs(precision) <= 3 ? Math.abs(precision) + 1 : reduceNumberOfDecimals(num, precision, axis.max, axis.min);\r\n            if (precisionDecimals > decimals) {\r\n                //the precision of endpoints should not be smaller then the one used for major ticks\r\n                return NINumericFormatters.prototype.toSiNotation(num, fixDecimalCountForSmallNumbers(num, precisionDecimals));\r\n            }\r\n        }\r\n\r\n        return NINumericFormatters.prototype.toSiNotation(num, fixDecimalCountForSmallNumbers(num, decimals));\r\n    };\r\n\r\n    // Makes sure the number smaller than 1e-24 are not converted to zero\r\n    var fixDecimalCountForSmallNumbers = function(num, decimals) {\r\n        var exponent = Math.floor(Math.log(Math.abs(num)) * Math.LOG10E),\r\n            minSiExtensionExponent = -24;\r\n        if (exponent < minSiExtensionExponent - 1) {\r\n            decimals += Math.abs(minSiExtensionExponent - 1 - exponent);\r\n        }\r\n        return decimals;\r\n    }\r\n\r\n    var getDecPrecisionNotationFormatter = function(decimals) {\r\n        return function(num) {\r\n            return NINumericFormatters.prototype.toDecPrecisionNotation(num, Math.min(decimals, 21));\r\n        };\r\n    };\r\n\r\n    var getDecFixedNotationFormatter = function(decimals, dontRound) {\r\n        return function decFixedNotationFormatter(num) {\r\n            var value = dontRound ? num : roundUsing(Math.floor, num, decimals);\r\n            return NINumericFormatters.prototype.toDecFixedNotation(value, decimals);\r\n        };\r\n    };\r\n\r\n    //heuristic for recomputing the number of decimals to [|log10(|num|) + tickDecimals|]\r\n    //where tickDecimals is compunted based on axis.max-axis.min\r\n    var reduceNumberOfDecimals = function(num, tickDecimals, max, min) {\r\n        var log10Max = Math.log(Math.abs(max)) * Math.LOG10E,\r\n            log10Min = min !== 0 ? Math.log(Math.abs(min)) * Math.LOG10E : 0,\r\n            orderSizeDif = Math.floor(Math.abs(log10Max - log10Min)),\r\n            log10Value = num !== 0 ? Math.log(Math.abs(num)) * Math.LOG10E : 0,\r\n            //the precision computed in flot will be positive for small interval and negative otherwise\r\n            decimals = Math.abs(log10Value + tickDecimals);\r\n\r\n        //the range of axis is big so we need to reduce the no of decimals\r\n        if (orderSizeDif > 3) {\r\n            return Math.ceil(decimals * 3 / orderSizeDif);\r\n        }\r\n\r\n        return Math.ceil(decimals);\r\n    };\r\n\r\n    var computeCroppedValue = function(val, roundingPower) {\r\n        var log10Value = val !== 0 ? Math.floor(Math.log(Math.abs(val)) * Math.LOG10E) : 0,\r\n            exp = Math.pow(10, log10Value),\r\n            croppedVal = val;\r\n\r\n        if (roundingPower > 0) {\r\n            croppedVal /= Math.pow(10, Math.floor(roundingPower / 3) * 3);\r\n        } else croppedVal *= Math.pow(10, log10Value % 3) / exp;\r\n\r\n        return croppedVal;\r\n    }\r\n\r\n    var roundUsing = function(roundFunction, number, precisionDigits) {\r\n        var precision = Math.pow(10, precisionDigits);\r\n        var tempNumber = number * precision;\r\n        tempNumber = roundFunction(tempNumber);\r\n\r\n        return tempNumber / precision;\r\n    };\r\n\r\n    NINumericFormatters.parseTickFormatterType = parseTickFormatterType;\r\n    NINumericFormatters.getTickFormatter = getTickFormatter;\r\n})();\r\n","//****************************************\r\n// Cartesian Graph Base Prototype\r\n// DOM Registration: HTMLNICartesianGraph\r\n// National Instruments Copyright 2015\r\n//****************************************\r\n\r\n/**\r\n## Webcharts API methods\r\nThe following methods are available for ni-cartesian-graph, ni-chart and\r\nni-intensity-graph.\r\n\r\n**setData** is the prefered method to write data to a graph. The other\r\noption, writing to the *value* property of the element is only recommended\r\nfor rarely changed small datasets, since it consumes more memory and CPU\r\ndue to the serialization/deserialization needed.\r\n\r\n```js\r\n// graph needs to be ready before calling any methods on it\r\nvar graph = document.querySelector('#myGraph');\r\ngraph.setData([1, 2, 3, 4, 5]);\r\n```\r\n\r\n**onRecenterPlot** is used to perform a reset for webcharts. This includes\r\nresetting the offset of the axis and redrawing of the plot.\r\n\r\n```js\r\n// graph needs to be ready before calling any methods on it\r\nvar graph = document.querySelector('#myGraph');\r\ngraph.onRecenterPlot();\r\n```\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    var $ = NationalInstruments.Globals.jQuery;\r\n    var NI_SUPPORT = NationalInstruments.HtmlVI.NISupport;\r\n    var graphDataPipeline = NationalInstruments.HtmlVI.DataPipeline.GraphDataPipeline;\r\n\r\n    var plotsUpdatesEnabled = true;\r\n    var graphConfigPending = false;\r\n    var seriesLength = 0;\r\n    const defaultPlotColors = [\r\n        'rgba(123, 22, 26, 1)',\r\n        'rgba(0, 142, 228, 1)',\r\n        'rgba(226, 182, 131, 1)',\r\n        'rgba(183, 172, 31, 1)',\r\n        'rgba(174, 220, 239, 1)',\r\n        'rgba(160, 139, 176, 1)',\r\n        'rgba(127, 127, 127, 1)',\r\n        'rgba(60, 7, 38, 1)'\r\n    ];\r\n\r\n    class CartesianGraphBase extends window.JQX.BaseElement {\r\n        getSettings() {\r\n            return this.getSettingsWorkaround();\r\n        };\r\n\r\n        //this is useful for adding or changing the default settings (e.g. chart or ni-light-plot-legend)\r\n        getSettingsWorkaround() {\r\n            var settings = {\r\n                lines: {\r\n                    show: true,\r\n                    lineWidth: 1\r\n                },\r\n                series: {\r\n                    shadowSize: 0, // Drawing is faster without shadows\r\n                    points: {\r\n                        lineWidth: 1 // in pixels\r\n                        //,fill: false // it's way faster if we don't fill the shapes. TODO: enable this\r\n                    }\r\n                },\r\n                axisLabels: {\r\n                    show: true\r\n                },\r\n                xaxes: [{}],\r\n                yaxes: [{}],\r\n                zoom: {\r\n                    interactive: true,\r\n                    active: true,\r\n                    trigger: null\r\n                },\r\n                pan: {\r\n                    interactive: true,\r\n                    active: true,\r\n                    enableTouch: true\r\n                },\r\n                selection: {\r\n                    mode: null\r\n                },\r\n                grid: {},\r\n                colors: defaultPlotColors\r\n            };\r\n\r\n            return settings;\r\n        }\r\n\r\n        static get defaultPlotColors() {\r\n            return defaultPlotColors;\r\n        };\r\n\r\n        configureGraph() {\r\n            var i;\r\n            var cartesianGraphSettings = this.getSettings();\r\n            if (this.plotAreaMargin !== '') {\r\n                cartesianGraphSettings.grid.margin = JSON.parse(this.plotAreaMargin);\r\n            }\r\n\r\n            // Apply Settings from host\r\n            cartesianGraphSettings.xaxes = [];\r\n            cartesianGraphSettings.yaxes = [];\r\n            cartesianGraphSettings.cursors = [];\r\n\r\n            for (i = 0; i < this.axes.length; i++) {\r\n                var axis = this.axes[i];\r\n                var a = axis.getViewConfig();\r\n\r\n                if (a) {\r\n                    if (a.position && ((a.position === 'left') || (a.position === 'right'))) {\r\n                        cartesianGraphSettings.yaxes.push(a);\r\n                    }\r\n\r\n                    if (a.position && ((a.position === 'top') || (a.position === 'bottom'))) {\r\n                        cartesianGraphSettings.xaxes.push(a);\r\n                    }\r\n                }\r\n            }\r\n\r\n            for (i = 0; i < this.cursors.length; i++) {\r\n                var cursor = this.cursors[i];\r\n                var c = cursor.getViewConfig();\r\n                cartesianGraphSettings.cursors.push(c);\r\n            }\r\n\r\n            if (this.graphTools) {\r\n                cartesianGraphSettings.zoom.interactive = this.graphTools.allowsScrollWheelZoom();\r\n                cartesianGraphSettings.pan.interactive = this.graphTools.allowsPan();\r\n                cartesianGraphSettings.selection.mode = this.graphTools.mode === 'zoom' ? 'smart' : null;\r\n            }\r\n\r\n            return cartesianGraphSettings;\r\n        };\r\n\r\n        updateGraphConfig() {\r\n            var childElement = this.graphdiv;\r\n            if (childElement === undefined) {\r\n                return; // not ready yet\r\n            }\r\n\r\n            var cartesianGraphData = this.createData(this.plots, this.convertToFlotFormat(this.parsedValue));\r\n            var cartesianGraphSettings = this.configureGraph();\r\n            this.setClick(cartesianGraphData, cartesianGraphSettings);\r\n            this.setHover(cartesianGraphData, cartesianGraphSettings);\r\n            this.setGridStyle(this.gridEl, cartesianGraphSettings);\r\n\r\n            try {\r\n                this.graph = $.plot(childElement, cartesianGraphData, cartesianGraphSettings);\r\n                var that = this;\r\n                this.graph.getCursors().forEach(function(cursor, i) {\r\n                    /* place a cookie on the cursor */\r\n                    cursor.cookie = that.cursors[i];\r\n                    that.cursors[i].setCursor(cursor);\r\n                });\r\n            } catch (error) {\r\n                NI_SUPPORT.log(error.message);\r\n            }\r\n        };\r\n\r\n        onCursorUpdates(event, cursordata) {\r\n            cursordata.forEach(function(cursor, i) {\r\n                cursor.target.cookie.updateCursorElement(cursordata[i]);\r\n            });\r\n        };\r\n\r\n        onRecenterPlot(event) {\r\n            this.parentElement.axes.forEach(function(axis) {\r\n                if (event.detail.axisTouched && axis.getFlotAxis() !== event.detail.axisTouched) {\r\n                    return;\r\n                }\r\n                if (axis.resetOffset) {\r\n                    axis.resetOffset();\r\n                }\r\n            });\r\n            this.parentElement.updateCartesianAxesFromFlot();\r\n        };\r\n\r\n        updateCartesianAxesFromFlot() {\r\n            if (this.graphdiv !== undefined) {\r\n                this.axes.forEach(function(axis) {\r\n                    if (axis instanceof JQX.CartesianAxis) {\r\n                        axis.syncWithFlot();\r\n                    }\r\n                });\r\n            }\r\n        };\r\n\r\n        throttlePlotUpdates(throttle) {\r\n            plotsUpdatesEnabled = !throttle;\r\n            if (plotsUpdatesEnabled && graphConfigPending) {\r\n                this.updateGraphConfig(); // keep the graph in sync\r\n                graphConfigPending = false;\r\n            }\r\n        };\r\n\r\n        updateGraphConfigWhenPlotsUpdatesAreEnabled() {\r\n            if (plotsUpdatesEnabled) {\r\n                this.updateGraphConfig();\r\n                graphConfigPending = false;\r\n            } else {\r\n                graphConfigPending = true;\r\n            }\r\n        };\r\n\r\n        convertToFlotFormat(value) {\r\n            return graphDataPipeline.prototype.toFlot(this, value, this.valueType);\r\n        };\r\n\r\n        updatePlotName(index, name) {\r\n            if (name) {\r\n                if (this.plots[index]) {\r\n                    this.plots[index].label = name;\r\n                }\r\n            }\r\n        };\r\n\r\n        createData(plots, dataSeries) {\r\n            var plotConfig = [];\r\n\r\n            dataSeries.forEach(function(data, i) {\r\n                var plot = plots[i];\r\n                if (Array.isArray(data)) {\r\n                    data = {\r\n                        data: data\r\n                    };\r\n                }\r\n\r\n                if (plot) {\r\n                    plotConfig[i] = plot.getViewConfig();\r\n                    plotConfig[i].data = (plot.show) ? data.data : [];\r\n                    // TODO mix the properties in a better way\r\n                    plotConfig[i].flatdata = data.flatdata;\r\n                    plotConfig[i].start = data.start;\r\n                    plotConfig[i].step = data.step;\r\n                    plotConfig[i].decimate = data.decimate;\r\n                    plotConfig[i].decimatePoints = data.decimatePoints;\r\n                } else {\r\n                    plotConfig[i] = data;\r\n                }\r\n            });\r\n\r\n            return plotConfig;\r\n        };\r\n\r\n        setData(data) {\r\n            var graph = this.graph;\r\n\r\n            if (graph === undefined) {\r\n                return;\r\n            }\r\n\r\n            var dataSeries = this.convertToFlotFormat(data);\r\n            this.parsedValue = data;\r\n            graph.setData(this.createData(this.plots, dataSeries));\r\n            graph.setupGrid();\r\n            graph.draw();\r\n\r\n            if (dataSeries.length !== seriesLength) {\r\n                seriesLength = dataSeries.length;\r\n                this.notifyPlotLegend('ni-plot-count-changed', { element: this, plotCount: dataSeries.length });\r\n            }\r\n        };\r\n\r\n        /** ## Webcharts properties*/\r\n        static get properties() {\r\n            const properties = Object.assign({}, super.properties, {\r\n                'value': {\r\n                    value: [],\r\n                    type: 'object'\r\n                },\r\n\r\n                /** **graph-ref** - a graph id used to bind legends to the graph*/\r\n                'graphRef': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **plot-area-margin** - TODO - document this*/\r\n                'plotAreaMargin': {\r\n                    value: '',\r\n                    type: 'string'\r\n                }\r\n            });\r\n\r\n            return properties;\r\n        };\r\n\r\n        created() {\r\n            super.created();\r\n            this.plots = [];\r\n            this.axes = [];\r\n            this.cursors = [];\r\n            this.plotLegend = null;\r\n            this.cursorLegend = null;\r\n            this.scaleLegend = null;\r\n            this.graphTools = null;\r\n            this.graphdiv = undefined;\r\n            this.tooltip = undefined;\r\n            this.tooltipHolder = undefined;\r\n            this.parsedValue = null;\r\n            this.addGraphItemListeners();\r\n        };\r\n\r\n        onResize(size) {\r\n            if (this.isVisibleElement(this)) {\r\n                if (this.graph === undefined) {\r\n                    this.createGraph();\r\n                }\r\n\r\n                var plot = this.graph;\r\n                plot.clearTextCache();\r\n                plot.resize();\r\n                plot.setupGrid();\r\n                plot.draw();\r\n            } else {\r\n                this.detachChildElement();\r\n            }\r\n        };\r\n\r\n        static get listeners() {\r\n            return {\r\n                'resize': 'onResize',\r\n                'resizeEventHack': 'onResize' // This event is fired by the LV Editor framework on resize\r\n            };\r\n        }\r\n\r\n        isVisibleElement(element) {\r\n            while (element !== null) {\r\n                if (getComputedStyle(element).display === 'none') {\r\n                    return false;\r\n                }\r\n                element = element.parentElement;\r\n            }\r\n            return true;\r\n        }\r\n\r\n        createGraph() {\r\n            var that = this;\r\n\r\n            if (!this.isVisibleElement(that)) {\r\n                return;\r\n            }\r\n\r\n            var childElement = document.createElement('div');\r\n            childElement.style.width = '100%';\r\n            childElement.style.height = '100%';\r\n            childElement.className = 'webchart-drawing-layer';\r\n            this.children.length > 0 ? this.insertBefore(childElement, this.children[0]) : this.appendChild(childElement);\r\n            var tooltipHolder = document.createElement('div');\r\n            tooltipHolder.style.width = '0px';\r\n            tooltipHolder.style.height = '0px';\r\n            tooltipHolder.style.position = 'relative';\r\n            tooltipHolder.className = 'ni-graph-tooltip-base';\r\n            var tooltip = document.createElement('div');\r\n            tooltip.id = 'tooltip' + NI_SUPPORT.uniqueId();\r\n            tooltip.className = 'ni-graph-tooltip';\r\n            tooltipHolder.appendChild(tooltip);\r\n            this.appendChild(tooltipHolder);\r\n            this.tooltip = tooltip;\r\n            this.tooltipHolder = tooltipHolder;\r\n            var fakeGrid = document.createElement('ni-grid-div');\r\n            fakeGrid.style.visibility = 'hidden';\r\n            this.appendChild(fakeGrid);\r\n            this.gridEl = fakeGrid;\r\n\r\n            this.graphdiv = childElement;\r\n\r\n            var cartesianGraphData = this.createData(this.plots, this.convertToFlotFormat(this.parsedValue));\r\n            var cartesianGraphSettings = this.configureGraph();\r\n            this.setClick(cartesianGraphData, cartesianGraphSettings);\r\n            this.setHover(cartesianGraphData, cartesianGraphSettings);\r\n            this.setGridStyle(this.gridEl, cartesianGraphSettings);\r\n\r\n            try {\r\n                this.graph = $.plot(childElement, cartesianGraphData, cartesianGraphSettings);\r\n            } catch (e) {\r\n                NI_SUPPORT.log('Failed to create a flot chart. Make sure that the placeholder element has a non-zero size !');\r\n            }\r\n\r\n            $(childElement).bind('plothover', function(event, pos, item) {\r\n                if (item && that.plots[item.seriesIndex]) {\r\n                    var x = item.datapoint[0],\r\n                        y = item.datapoint[1],\r\n                        hoverFormat = that.plots[item.seriesIndex].hoverFormat || '{0}, {1}',\r\n                        str = that.format(hoverFormat, x, y);\r\n\r\n                    $(tooltip).html(str)\r\n                        .css({\r\n                            top: item.pageY - $(tooltipHolder).offset().top + 5,\r\n                            left: item.pageX - $(tooltipHolder).offset().left + 5\r\n                        })\r\n                        .fadeIn(100);\r\n                } else {\r\n                    $(tooltip).hide();\r\n                }\r\n            });\r\n\r\n            $(childElement).bind('plothovercleanup', function() {\r\n                $(tooltip).hide();\r\n            });\r\n\r\n            try {\r\n                this.graph.getPlaceholder().bind('cursorupdates', this.onCursorUpdates);\r\n                this.graph.getPlaceholder().bind('re-center', this.onRecenterPlot);\r\n                this.graph.getCursors().forEach(function(cursor, i) {\r\n                    /* place a cookie on the cursor */\r\n                    cursor.cookie = that.cursors[i];\r\n                    that.cursors[i].setCursor(cursor);\r\n                });\r\n            } catch (e) {}\r\n        };\r\n\r\n        attached() {\r\n            super.attached();\r\n            this.parsedValue = this.value;\r\n            this.attachChildren();\r\n            this.createGraph();\r\n            this.attachLegends();\r\n        };\r\n\r\n        detached() {\r\n            super.detached();\r\n            this.detachChildElement();\r\n        }\r\n\r\n        detachChildElement() {\r\n            if (this.graph !== undefined) {\r\n                this.graph.destroy();\r\n            }\r\n\r\n            this.graph = undefined;\r\n\r\n            if (this.graphdiv !== undefined) {\r\n                this.removeChild(this.graphdiv);\r\n            }\r\n\r\n            this.graphdiv = undefined;\r\n\r\n            if (this.tooltipHolder !== undefined) {\r\n                this.removeChild(this.tooltipHolder);\r\n            }\r\n\r\n            this.tooltip = undefined;\r\n            this.tooltipHolder = undefined;\r\n\r\n            if (this.gridEl !== undefined) {\r\n                this.removeChild(this.gridEl);\r\n            }\r\n\r\n            this.gridEl = undefined;\r\n        }\r\n\r\n        addGraphItemListeners(childElements) {\r\n            var that = this,\r\n                pushNewPlot = function(graph, plots, newPlot) {\r\n                    var siblings = graph.getElementsByTagName('ni-cartesian-plot'),\r\n                        newOrderedPlotList = [];\r\n                    for (var i = 0; i < siblings.length; i++) {\r\n                        var sibling = siblings[i],\r\n                            alreadyPushed = plots.find(function(p) {\r\n                                return p === sibling;\r\n                            });\r\n                        if (alreadyPushed || sibling === newPlot) {\r\n                            newOrderedPlotList.push(sibling);\r\n                        }\r\n                    }\r\n                    return newOrderedPlotList;\r\n                };\r\n            that.addEventListener('ni-cartesian-plot-attached', function (evt) {\r\n                if (evt.target === that) {\r\n                    that.plots = pushNewPlot(that, that.plots, evt.detail.element);\r\n                    that.updateGraphConfigWhenPlotsUpdatesAreEnabled();\r\n                    that.notifyPlotLegend('ni-cartesian-plot-attached', evt.detail.element);\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-plot-detached', function(evt) {\r\n                var i;\r\n\r\n                that.notifyPlotLegend('ni-cartesian-plot-detached', evt.detail.element);\r\n\r\n                if (evt.target === that) {\r\n                    for (i = 0; i < that.plots.length; i++) {\r\n                        if (that.plots[i] === evt.detail.element) {\r\n                            that.plots.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    that.updateGraphConfigWhenPlotsUpdatesAreEnabled();\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-axis-attached', function (evt) {\r\n                if (evt.target === that) {\r\n                    that.axes.push(evt.detail.element);\r\n                    that.updateGraphConfig();\r\n                    that.notifyScaleLegend('ni-cartesian-axis-attached', evt.detail.element);\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-axis-detached', function (evt) {\r\n                var i;\r\n\r\n                if (evt.target === that) {\r\n                    for (i = 0; i < that.axes.length; i++) {\r\n                        if (that.axes[i] === evt.detail.element) {\r\n                            that.axes.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    that.updateGraphConfig();\r\n                    that.notifyScaleLegend('ni-cartesian-axis-detached', evt.detail.element);\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-cursor-attached', function(evt) {\r\n                if (evt.target === that) {\r\n                    that.cursors.push(evt.detail.element);\r\n                    that.updateGraphConfig();\r\n                    that.notifyCursorLegend('ni-cursor-attached', evt.detail.element);\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-cursor-detached', function(evt) {\r\n                var i;\r\n\r\n                if (evt.target === that) {\r\n                    for (i = 0; i < that.cursors.length; i++) {\r\n                        if (that.cursors[i] === evt.detail.element) {\r\n                            that.cursors.splice(i, 1);\r\n                            break;\r\n                        }\r\n                    }\r\n\r\n                    that.updateGraphConfig();\r\n                    that.notifyCursorLegend('ni-cursor-detached', evt.detail.element);\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-axis-changed', function(evt) {\r\n                that.updateGraphConfig();\r\n                that.notifyScaleLegend('ni-axis-changed', evt.detail.element);\r\n            });\r\n\r\n            that.addEventListener('ni-axis-reset', function(evt) {\r\n                var axis = evt.detail.element,\r\n                    flotAxis = axis.getFlotAxis();\r\n                that.graph.recenter({axes: [ flotAxis ]});\r\n                that.notifyScaleLegend('ni-axis-changed', evt.detail.element);\r\n            });\r\n\r\n            that.addEventListener('ni-cursor-changed', function(evt) {\r\n                that.updateGraphConfig();\r\n                that.notifyCursorLegend('ni-cursor-changed', evt.detail.element);\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-plot-changed', function(evt) {\r\n                that.updateGraphConfigWhenPlotsUpdatesAreEnabled();\r\n                that.notifyPlotLegend('ni-cartesian-plot-changed', evt.detail.element);\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-plot-renderer-changed', function(evt) {\r\n                that.updateGraphConfigWhenPlotsUpdatesAreEnabled();\r\n                that.notifyPlotLegend('ni-cartesian-plot-renderer-changed', evt.detail.originalSource);\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-plot-renderer-attached', function(evt) {\r\n                that.updateGraphConfigWhenPlotsUpdatesAreEnabled();\r\n                that.notifyPlotLegend('ni-cartesian-plot-renderer-attached', evt.detail.originalSource);\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-plot-renderer-detached', function(evt) {\r\n                that.updateGraphConfigWhenPlotsUpdatesAreEnabled();\r\n                that.notifyPlotLegend('ni-cartesian-plot-renderer-detached', evt.detail.originalSource);\r\n            });\r\n\r\n            that.addEventListener('ni-graph-tools-changed', function() {\r\n                that.updateGraphConfig();\r\n            });\r\n        };\r\n\r\n        registerPlotLegend(plotLegend) {\r\n            this.plotLegend = plotLegend;\r\n        };\r\n\r\n        notifyPlotLegend(name, originalSource) {\r\n            var eventConfig;\r\n\r\n            if (this.plotLegend !== null) {\r\n                eventConfig = {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this,\r\n                        originalSource: originalSource\r\n                    }\r\n                };\r\n\r\n                this.plotLegend.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        registerCursorLegend(cursorLegend) {\r\n            var i;\r\n            this.cursorLegend = cursorLegend;\r\n            if (this.cursors.length > 0) {\r\n                for (i = 0; i < this.cursors.length; i++) {\r\n                    this.notifyCursorLegend('ni-cursor-attached', this.cursors[i]);\r\n                }\r\n            }\r\n        };\r\n\r\n        notifyCursorLegend(name, originalSource) {\r\n            var eventConfig;\r\n\r\n            if (this.cursorLegend !== null) {\r\n                eventConfig = {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this,\r\n                        originalSource: originalSource\r\n                    }\r\n                };\r\n\r\n                this.cursorLegend.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        registerScaleLegend(scaleLegend) {\r\n            var i;\r\n            this.scaleLegend = scaleLegend;\r\n            if (this.axes.length > 0) {\r\n                for (i = 0; i < this.axes.length; i++) {\r\n                    this.notifyScaleLegend('ni-cartesian-axis-attached', this.axes[i]);\r\n                }\r\n            }\r\n        };\r\n\r\n        notifyScaleLegend(name, originalSource) {\r\n            var eventConfig;\r\n\r\n            if (this.scaleLegend !== null) {\r\n                eventConfig = {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this,\r\n                        originalSource: originalSource\r\n                    }\r\n                };\r\n\r\n                this.scaleLegend.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        registerGraphTools(graphTools) {\r\n            var that = this;\r\n            this.graphTools = graphTools;\r\n\r\n            this.updateGraphConfig();\r\n\r\n            $(this.graphdiv).on('plotselected', function(event, ranges) {\r\n                that.notifyGraphTools('ni-cartesian-graph-box-selected', {\r\n                    ranges: ranges\r\n                });\r\n            });\r\n\r\n            $(this.graphdiv).on('plotpan', function(event, ranges) {\r\n                that.notifyGraphTools('ni-cartesian-graph-interaction', {\r\n                    ranges: ranges\r\n                });\r\n            });\r\n\r\n            $(this.graphdiv).on('plotzoom', function(event, ranges) {\r\n                that.notifyGraphTools('ni-cartesian-graph-interaction', {\r\n                    ranges: ranges\r\n                });\r\n            });\r\n        };\r\n\r\n        notifyGraphTools(name, originalSource) {\r\n            var eventConfig;\r\n\r\n            if (this.graphTools !== null) {\r\n                eventConfig = {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this,\r\n                        originalSource: originalSource\r\n                    }\r\n                };\r\n\r\n                this.graphTools.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        attachChildren() {\r\n            var graphElement = this,\r\n                children = this.children,\r\n                tagsAndClasses = {\r\n                    'NI-COLOR-SCALE': window.JQX.ColorScale,\r\n                    'NI-CARTESIAN-PLOT': window.JQX.CartesianPlot,\r\n                    'NI-CURSOR': window.JQX.Cursor,\r\n                    'NI-CARTESIAN-AXIS': window.JQX.CartesianAxis\r\n                };\r\n\r\n            for (var i = 0; i < children.length; i++) {\r\n                var element = children[i];\r\n                if (tagsAndClasses[element.tagName] && element instanceof tagsAndClasses[element.tagName] && element.isReady) {\r\n                    element.attachToGraph(graphElement);\r\n                }\r\n            }\r\n        };\r\n\r\n        // find the graph legend elements that were created before the graph element and attach them\r\n        attachLegends() {\r\n            var graphElement = this,\r\n                legendTags = [\r\n                    'ni-plot-legend'.toUpperCase(),\r\n                    'ni-scale-legend'.toUpperCase(),\r\n                    'ni-cursor-legend'.toUpperCase(),\r\n                    'ni-graph-tools'.toUpperCase()\r\n                ],\r\n\r\n                children = this.parentElement.children,\r\n                myLegends = [];\r\n\r\n            for (var i = 0; i < children.length; i++) {\r\n                var element = children[i];\r\n                if ((legendTags.indexOf(element.tagName) !== -1) && (element.graphRef === this.graphRef || element.graphRef === this.niControlId)) {\r\n                    // this is a legend element that references this graph element\r\n                    myLegends.push(element);\r\n                }\r\n            }\r\n\r\n            myLegends.forEach(function(legend) {\r\n                if (legend.isReady && legend.attachToGraph) {\r\n                    legend.attachToGraph(graphElement);\r\n                }\r\n            });\r\n        };\r\n\r\n        propertyChangedHandler(propertyName, oldValue, newValue) {\r\n            super.propertyChangedHandler(propertyName, oldValue, newValue);\r\n            switch (propertyName) {\r\n                case 'value':\r\n                    this.setData(this.value);\r\n                    break;\r\n                case 'plotAreaMargin':\r\n                    this.updateGraphConfig();\r\n                    break;\r\n            }\r\n        };\r\n\r\n        format() {\r\n            var args = arguments;\r\n            var str = args[0];\r\n            return str.replace(/{(\\d+)}/g, function(match, number) {\r\n                var index = parseInt(number) + 1;\r\n                var item = args[index];\r\n\r\n                if (typeof item !== 'undefined') {\r\n                    var len1 = item.toFixed(2).length;\r\n                    var len2 = item.toExponential(2).length;\r\n                    if (len1 < len2) {\r\n                        return item.toFixed(2);\r\n                    } else {\r\n                        return item.toExponential(2);\r\n                    }\r\n                } else {\r\n                    return match;\r\n                }\r\n            });\r\n        };\r\n\r\n        setClick(graphData, graphSettings) {\r\n            for (var i = 0; i < graphData.length; i++) {\r\n                if (graphData[i].clickable) {\r\n                    graphSettings.grid = graphSettings.grid || {};\r\n                    graphSettings.grid.clickable = true;\r\n                    break;\r\n                }\r\n            }\r\n        };\r\n\r\n        setHover(graphData, graphSettings) {\r\n            var i,\r\n                isHoverable = false;\r\n\r\n            for (i = 0; i < graphData.length; i++) {\r\n                if (graphData[i].hoverable) {\r\n                    isHoverable = true;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (isHoverable === true) {\r\n                if (graphSettings.grid === undefined) {\r\n                    graphSettings.grid = {};\r\n                }\r\n\r\n                graphSettings.grid.hoverable = isHoverable;\r\n            } else {\r\n                if (this.tooltip !== null) {\r\n                    $(this.tooltip).hide();\r\n                }\r\n            }\r\n        };\r\n\r\n        setGridStyle(gridEl, graphSettings) {\r\n            var grid = graphSettings.grid;\r\n            var style = window.getComputedStyle(gridEl);\r\n            var borderStyle = style.borderStyle;\r\n\r\n            var borderBottomWidth = style.borderBottomWidth.replace('px', '');\r\n            var borderTopWidth = style.borderTopWidth.replace('px', '');\r\n            var borderLeftWidth = style.borderLeftWidth.replace('px', '');\r\n            var borderRightWidth = style.borderRightWidth.replace('px', '');\r\n            var borderWidth = {\r\n                top: Number(borderTopWidth),\r\n                bottom: Number(borderBottomWidth),\r\n                left: Number(borderLeftWidth),\r\n                right: Number(borderRightWidth)\r\n            };\r\n\r\n            var color = style.borderColor;\r\n            var bgColor = style.backgroundColor;\r\n\r\n            grid.borderWidth = (borderStyle === 'solid') ? borderWidth : 0;\r\n            grid.borderColor = color;\r\n            grid.color = style.color;\r\n            grid.backgroundColor = bgColor;\r\n        };\r\n\r\n        getYAxisIndexByNIControlID(id) {\r\n            var index = 0;\r\n\r\n            for (var i = 0; i < this.axes.length; i++) {\r\n                var axis = this.axes[i];\r\n                if ((axis.axisPosition === 'left') || (axis.axisPosition === 'right')) {\r\n                    index++;\r\n                    if (axis.axisRef === id || axis.niControlId === id) {\r\n                        return index;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return 1;\r\n        }\r\n\r\n        getXAxisIndexByNIControlID(id) {\r\n            var index = 0;\r\n\r\n            for (var i = 0; i < this.axes.length; i++) {\r\n                var axis = this.axes[i];\r\n                if ((axis.axisPosition === 'top') || (axis.axisPosition === 'bottom')) {\r\n                    index++;\r\n                    if (axis.axisRef === id || axis.niControlId === id) {\r\n                        return index;\r\n                    }\r\n                }\r\n            }\r\n\r\n            return 1;\r\n        }\r\n\r\n        takeGraphSnapshot(canvasOrSvgSources, destinationCanvas) {\r\n            return this.graph.composeImages(canvasOrSvgSources, destinationCanvas);\r\n        }\r\n\r\n        template () {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    Object.assign(window.NationalInstruments.HtmlVI.Elements, {\r\n        'CartesianGraphBase': CartesianGraphBase\r\n    });\r\n}());\r\n","//****************************************\r\n// Cartesian Graph Prototype\r\n// DOM Registration: HTMLNICartesianGraph\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-cartesian-graph\r\n\r\n> A custom element that allows to graph one or multiple data sets.\r\n\r\nAn ni-cartesian-graph is a declarative way, that uses custom elements, to add a graph\r\nto a web page. Specify your data sets using the value attribute and customize how\r\nthe data is renderended using nested custom elements such as *ni-cartesian-axis*,\r\n*ni-cartesian-plot*, *ni-cartesian-plot-renderer* or *ni-cursor*.\r\n\r\nExample showing how you can render a graph of prime number versus fibonacci numbers.\r\n```html\r\n<ni-cartesian-graph value=\"[[2, 3, 5, 7, 11, 13, 17, 19],\r\n                          [0, 1, 1, 2, 3, 5, 8, 13]]\">\r\n  <ni-cartesian-axis show label=\"Index\" axis-position=\"bottom\"></ni-cartesian-axis>\r\n  <ni-cartesian-axis show label=\"Value\" axis-position=\"left\"></ni-cartesian-axis>\r\n  <ni-cartesian-plot show label=\"Prime Numbers\">\r\n    <ni-cartesian-plot-renderer line-width=\"2\" line-stroke=\"red\">\r\n    </ni-cartesian-plot-renderer>\r\n  </ni-cartesian-plot>\r\n  <ni-cartesian-plot show label=\"Fibonacci Numbers\">\r\n    <ni-cartesian-plot-renderer line-width=\"2\" line-stroke=\"blue\">\r\n    </ni-cartesian-plot-renderer>\r\n  </ni-cartesian-plot>\r\n</ni-cartesian-graph>\r\n```\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    class CartesianGraph extends NationalInstruments.HtmlVI.Elements.CartesianGraphBase {\r\n        /// include ./DataPipeline/niGraphDataPipeline.js\r\n    };\r\n\r\n    JQX('ni-cartesian-graph', CartesianGraph);\r\n}());\r\n","//****************************************\r\n// Chart custom element\r\n// DOM Registration: HTMLNIChart\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-chart\r\n\r\n> A custom element that allows to chart one or multiple data sets.\r\n\r\nThe difference between a graph and a chart is that a graph plots directly the data\r\nsets provided but the chart uses a buffer of historical values, called a\r\nHistoryBuffer for data handling.\r\n\r\nAs you append new values to the charts' History buffer the chart is updated as\r\nneeded, on the next browser animation frame.\r\n\r\nExample:\r\n\r\n```html\r\n<ni-chart id=\"chart1\" buffer-size=\"1024\">\r\n    <ni-cartesian-axis show label=\"Time\" axis-position=\"bottom\"></ni-cartesian-axis>\r\n    <ni-cartesian-axis show label=\"Amplitude\" axis-position=\"left\"></ni-cartesian-axis>\r\n    <ni-cartesian-plot show label=\"Plot 1\">\r\n      <ni-cartesian-plot-renderer line-width=\"2\" line-stroke=\"#a84716\"></ni-cartesian-plot-renderer>\r\n    </ni-cartesian-plot>\r\n</ni-chart>\r\n\r\n<script>\r\n  var historyBuffer = $('#chart1').getHistoryBuffer();\r\n\r\n  // write 1000 values into the chart's history buffer\r\n  for (var i = 0; i < 10; i++) {\r\n    historyBuffer.push(Math.sin(i));\r\n    i += 0.01;\r\n  }\r\n</script>\r\n```\r\n\r\nThe HistoryBuffer API is described [here](historyBuffer.md).\r\n\r\n## Data types supported by ni-chart\r\n\r\nTo add data to the chart you need to write it into the history buffer. Remember to set\r\nthe width of the history buffer to be *equal with number of plots* you are writing.\r\n\r\nUse [history buffer's](historyBuffer.md) *setWidth* method to change the number of\r\ndata series in the chart.\r\n\r\nHere are some examples for adding numbers and arrays of numbers to the history buffer.\r\n\r\n* **Numbers**\r\n```js\r\n    var chart = document.querySelector('#myChart');\r\n    var hb = chart.getHistoryBuffer();\r\n\r\n    hb.push(5); // add 5 to the history buffer\r\n```\r\nThis will render a single plot\r\n\r\n* **multiple Numbers**\r\n```js\r\n    var chart = document.querySelector('#myChart');\r\n    var hb = chart.getHistoryBuffer();\r\n    hb.setWidth(3); // sets the width of the history buffer (number of plots)\r\n\r\n    hb.push([5, 7, 8]); // adds 5 to first data series,\r\n                        // 7 to the second one and 8 to the third one\r\n```\r\nThis will render 3 plots\r\n\r\n* **array of Numbers**\r\n```js\r\n    var chart = document.querySelector('#myChart');\r\n    var hb = chart.getHistoryBuffer();\r\n\r\n    hb.appendArray([5, 7, 8]); // add 5, 7 and 8 to first data series\r\n```\r\nThis will render a single plot.\r\n\r\n* **arrays of arrays of Numbers**\r\n```js\r\n    var chart = document.querySelector('#myChart');\r\n    var hb = chart.getHistoryBuffer();\r\n\r\n    hb.appendArray([[5, 7], [8, 9]]); // add 5 and 7 to first data series\r\n                                     // and 8 and 9 to the second one\r\n```\r\nThis will render two plots.\r\n\r\n* **analogWaveform**\r\n```js\r\n    var chart = document.querySelector('#myChart');\r\n    var hb = chart.getHistoryBuffer();\r\n    hb.setType('analogWaveform'); // or 'numeric' to switch the history buffer back to numeric data types\r\n\r\n    var aw = new NIAnalogWaveform({\r\n        t0: new NITimestamp(),\r\n        dt:0.001,\r\n        Y: [1, 2, 3, 5]\r\n    });\r\n\r\n    hb.push(aw); // push the analog waveform into the buffer\r\n```\r\nThis will render one plot of analog waveforms.\r\n\r\n* ** array of analogWaveforms**\r\n```js\r\n    var chart = document.querySelector('#myChart');\r\n    var hb = chart.getHistoryBuffer();\r\n    hb.setType('analogWaveform'); // or 'numeric' to switch the history buffer back to numeric data types\r\n    hb.setWidth(2);\r\n\r\n    var aw = new NIAnalogWaveform({\r\n        t0: new NITimestamp(),\r\n        dt:0.001,\r\n        Y: [1, 2, 3, 5]\r\n    });\r\n\r\n    var aw1 = new NIAnalogWaveform({\r\n        t0: new NITimestamp(),\r\n        dt:0.001,\r\n        Y: [6, 7, 8, 9]\r\n    });\r\n\r\n    hb.push([aw, aw1]); // push the analog waveforms into the buffer\r\n```\r\n\r\nThis will render two plots af analog waveforms.\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n    // Static Private Reference Aliases\r\n    var ChartDataPipeline = NationalInstruments.HtmlVI.DataPipeline.ChartDataPipeline;\r\n\r\n    class Chart extends NationalInstruments.HtmlVI.Elements.CartesianGraphBase {\r\n        /** ### ni-chart properties*/\r\n        static get properties() {\r\n            const properties = Object.assign({}, super.properties, {\r\n                /** **buffer-size** (number) - the size of the chart history buffer */\r\n                'bufferSize': {\r\n                    value: 1024,\r\n                    type: 'number'\r\n                }\r\n            });\r\n\r\n            return properties;\r\n        };\r\n\r\n        /** **value** - the default value to initialize the history buffer with\r\n\r\n        Supported formats:\r\n        * empty string for no default value\r\n        * 1D array for single plot charts: [1, 2, 3]\r\n        * 2D arrays for multiple plot charts: [[1, 11], [2, 12], [3, 13]]\r\n        * serialized history buffer: { valueType: 'HistoryBuffer', data: [[1, 2, 3], [11, 12, 13]] }\r\n\r\n        It is possible to specify special values like NaN or Infinity as strings: [1, 2, 'NaN', 'Infinity']\r\n\r\n         */\r\n\r\n        /** ### ni-chart methods*/\r\n\r\n        /** **setHistoryBuffer(historyBuffer)** - changes the internal history buffer\r\n        of the chart to the provided one*/\r\n        setHistoryBuffer(historyBuffer) {\r\n            this.historyBuffer = historyBuffer;\r\n        };\r\n\r\n        /** **getHistoryBuffer()** - returns a reference to the internal history\r\n        buffer of the chart*/\r\n        getHistoryBuffer() {\r\n            return this.historyBuffer;\r\n        };\r\n\r\n        ready() {\r\n            if (!this.historyBuffer) {\r\n                this.historyBuffer = new HistoryBuffer(this.bufferSize, 1);\r\n            }\r\n            if (this.value) {\r\n                ChartDataPipeline.prototype.loadValueIntoHistoryBuffer(this.value, this.historyBuffer);\r\n            }\r\n            super.ready();\r\n        };\r\n\r\n        createData(plots, dataSeries) {\r\n            var plotConfig = [];\r\n            var len = Math.max(dataSeries.length, plots.length);\r\n\r\n            for (var i = 0; i < len; i++) {\r\n                var data = dataSeries[i] || [];\r\n                var plot = plots[i];\r\n                if (Array.isArray(data)) {\r\n                    data = {\r\n                        data: data\r\n                    };\r\n                }\r\n\r\n                if (plot) {\r\n                    plotConfig[i] = plot.getViewConfig();\r\n                    plotConfig[i].data = (plot.show) ? data.data : [];\r\n                } else {\r\n                    plotConfig[i] = data;\r\n                }\r\n            }\r\n\r\n            return plotConfig;\r\n        };\r\n\r\n        convertToFlotFormat(value) {\r\n            return ChartDataPipeline.prototype.toFlot(this, value);\r\n        };\r\n\r\n        getSettings() {\r\n            return this.getSettingsWorkaround();\r\n        };\r\n\r\n        getSettingsWorkaround() {\r\n            var settings = super.getSettingsWorkaround();\r\n\r\n            settings.series.historyBuffer = this.historyBuffer;\r\n\r\n            return settings;\r\n        }\r\n    };\r\n\r\n    JQX('ni-chart', Chart);\r\n}());\r\n","//****************************************\r\n// IntensityGraph Custom Element\r\n// DOM Registration: HTMLNIIntensityGraph\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-intensity-graph\r\n\r\n> A custom element that allows to plot a 2D data set as a gradient map.\r\n\r\nAn ni-intensity-graph is a declarative way, that uses custom elements, to add an\r\nintensity graph to a web page. Specify your data sets using the value attribute\r\nand customize how the data is renderended using nested custom elements such as\r\n*ni-cartesian-axis*, *ni-color-scale*.\r\n\r\nExample:\r\n```html\r\n<ni-intensity-graph id=\"graph1\" value=\"[[0.1, 0.2], [0.3, 0.4], [0.5, 0.6]]\">\r\n    <ni-cartesian-axis label=\"X\" show show-label axis-position=\"bottom\" grid-lines></ni-cartesian-axis>\r\n    <ni-cartesian-axis label=\"Y\" show show-label axis-position=\"left\" grid-lines></ni-cartesian-axis>\r\n    <ni-color-scale label=\"Color Scale\" show show-label\r\n        markers='[{\"value\":0,\"color\":\"rgba(0,0,0,1)\"},{\"value\":50,\"color\":\"rgba(0,0,255,1)\"},{\"value\":100,\"color\":\"rgba(255,255,255,1)\"}]'\r\n        high-color=\"rgba(255,255,255,1)\" low-color=\"rgba(0,0,0,1)\">\r\n    </ni-color-scale>\r\n</ni-intensity-graph>\r\n```\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    var $ = NationalInstruments.Globals.jQuery;\r\n\r\n    class IntensityGraph extends NationalInstruments.HtmlVI.Elements.CartesianGraphBase {\r\n        static get ColorScaleType() {\r\n            return $.plot.IntensityGraph.ColorScaleType;\r\n        }\r\n\r\n        dataRange() {\r\n            var parsedData = this.parsedData;\r\n\r\n            if (IntensityGraph === null || parsedData.length === 0) {\r\n                return {\r\n                    dataMin: 0,\r\n                    dataMax: 100\r\n                };\r\n            } else {\r\n                var tempMin = Math.min();\r\n                var tempMax = Math.max();\r\n                for (var i = 0; i < parsedData.length; i++) {\r\n                    var buf = parsedData[i];\r\n                    for (var j = 0; j < buf.length; j++) {\r\n                        if (buf[j] === -Infinity || buf[j] === Infinity || isNaN(buf[j])) {\r\n                            continue;\r\n                        }\r\n                        if (buf[j] > tempMax) {\r\n                            tempMax = buf[j];\r\n                        }\r\n\r\n                        if (buf[j] < tempMin) {\r\n                            tempMin = buf[j];\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (tempMin === Math.min()) {\r\n                    tempMin = 0;\r\n                }\r\n                if (tempMax === Math.max()) {\r\n                    tempMax = 100;\r\n                }\r\n\r\n                return {\r\n                    dataMin: tempMin,\r\n                    dataMax: tempMax\r\n                };\r\n            }\r\n        }\r\n\r\n        created() {\r\n            super.created();\r\n\r\n            this.autoScaleColor = false;\r\n            this.parsedData = null;\r\n        }\r\n\r\n        getSettings() {\r\n            var settings = {\r\n                series: {\r\n                    intensitygraph: {\r\n                        show: true\r\n                    }\r\n                },\r\n                axisLabels: {\r\n                    show: true\r\n                },\r\n                xaxes: [{}],\r\n                yaxes: [{}],\r\n                zoom: {\r\n                    interactive: true,\r\n                    trigger: null\r\n                },\r\n                pan: {\r\n                    interactive: true,\r\n                    enableTouch: true\r\n                },\r\n                selection: {\r\n                    mode: null\r\n                },\r\n                grid: {}\r\n            };\r\n\r\n            return settings;\r\n        }\r\n\r\n        configureGraph() {\r\n            var i, j, gradient = [];\r\n            var colorScaleMin, colorScaleMax;\r\n\r\n            var cartesianGraphSettings = super.configureGraph();\r\n\r\n            if (this.plotAreaMargin !== '') {\r\n                cartesianGraphSettings.grid.margin = this.plotAreaMargin;\r\n            }\r\n\r\n            var data = this.value;\r\n            cartesianGraphSettings.series.intensitygraph.data = data.length > 0 ? data : this.defaultData();\r\n\r\n            for (i = 0; i < this.axes.length; i++) {\r\n                var axis = this.axes[i];\r\n                var a = axis.getViewConfig();\r\n\r\n                if (a && a.type === JQX.IntensityGraph.ColorScaleType) {\r\n                    var markers = JSON.parse(a.markers);\r\n                    for (j = 0; j < markers.length; j++) {\r\n                        gradient[j] = {\r\n                            value: markers[j].value,\r\n                            color: markers[j].color\r\n                        };\r\n                    }\r\n\r\n                    if (a.autoScale === 'none') {\r\n                        colorScaleMin = markers[0].value;\r\n                        colorScaleMax = markers[markers.length - 1].value;\r\n                    } else {\r\n                        this.autoScaleColor = true;\r\n                        var range = this.dataRange();\r\n                        colorScaleMax = range.dataMax;\r\n                        colorScaleMin = range.dataMin;\r\n                    }\r\n\r\n                    cartesianGraphSettings.series.intensitygraph.min = colorScaleMin;\r\n                    cartesianGraphSettings.series.intensitygraph.max = colorScaleMax;\r\n                    cartesianGraphSettings.series.intensitygraph.gradient = gradient;\r\n                    cartesianGraphSettings.series.intensitygraph.lowColor = a.lowColor;\r\n                    cartesianGraphSettings.series.intensitygraph.highColor = a.highColor;\r\n\r\n                    for (j = 0; j < cartesianGraphSettings.yaxes.length; j++) {\r\n                        if (cartesianGraphSettings.yaxes[j].type === JQX.IntensityGraph.ColorScaleType) {\r\n                            cartesianGraphSettings.yaxes[j].min = colorScaleMin;\r\n                            cartesianGraphSettings.yaxes[j].max = colorScaleMax;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.graphTools) {\r\n                cartesianGraphSettings.zoom.interactive = this.graphTools.allowsScrollWheelZoom();\r\n                cartesianGraphSettings.pan.interactive = this.graphTools.allowsPan();\r\n                cartesianGraphSettings.selection.mode = this.graphTools.mode === 'zoom' ? 'smart' : null;\r\n            }\r\n\r\n            return cartesianGraphSettings;\r\n        }\r\n\r\n        attached() {\r\n            super.attached();\r\n            this.updateCartesianAxesFromFlot();\r\n        }\r\n\r\n        updateColorScaleLimits() {\r\n            var plot = this.graph;\r\n            if (plot) {\r\n                var colorScaleAxis = plot.getYAxes().filter(function(axis) { return axis.options.type === JQX.IntensityGraph.ColorScaleType; })[0];\r\n                //check if colorscale is on autoScale and update min and max\r\n                if (colorScaleAxis && colorScaleAxis.options.autoScale !== 'none') {\r\n                    var range = this.dataRange();\r\n                    colorScaleAxis.options.min = range.dataMin;\r\n                    colorScaleAxis.options.max = range.dataMax;\r\n                }\r\n            }\r\n        }\r\n\r\n        defaultData() {\r\n            return [\r\n                []\r\n            ];\r\n        }\r\n\r\n        createData(plots, data) {\r\n            // the data is placed in the config not the series because it does not match the series data type (and converting it might be expensive)\r\n            var graphdata = data.length > 0 ? data : this.defaultData(),\r\n                firstYAxisIndex = this.axes\r\n                    .filter(a => a.axisPosition === 'left' || a.axisPosition === 'right')\r\n                    .findIndex(a => a.tagName === 'NI-CARTESIAN-AXIS'),\r\n                flotFirstYAxisIndex = firstYAxisIndex === -1 ? undefined : (firstYAxisIndex + 1),\r\n                plotData = {\r\n                    data: graphdata,\r\n                    //xaxis: will be automatically determined\r\n                    yaxis: flotFirstYAxisIndex\r\n                };\r\n\r\n            this.parsedData = graphdata;\r\n            this.updateColorScaleLimits();\r\n\r\n            return [plotData];\r\n        }\r\n\r\n        convertToFlotFormat (data) {\r\n            return data;\r\n        }\r\n    }\r\n\r\n    JQX('ni-intensity-graph', IntensityGraph);\r\n}());\r\n","/*jslint nomen: true, devel:true*/\r\n//****************************************\r\n// Cartesian Axis Custom Element\r\n// DOM Registration: HTMLNICartesianAxis\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-cartesian-axis\r\n\r\n> Add axes to a graph.\r\n\r\n```html\r\n<ni-cartesian-graph>\r\n  <ni-cartesian-axis show grid-lines show-label label=\"Axis 1\" axis-position='bottom'>\r\n  </ni-cartesian-axis>\r\n  <ni-cartesian-axis show grid-lines show-label label=\"Axis 2\" axis-position='top'>\r\n  </ni-cartesian-axis>\r\n  <ni-cartesian-axis show grid-lines show-label label=\"Axis 3\" axis-position='left'>\r\n  </ni-cartesian-axis>\r\n</ni-cartesian-graph>\r\n```\r\nMultiple vertical and horizontal axes can be added to a graph and configured.\r\n\r\nAxes can be placed to the right, left and on top or bottom of a graph, can use a\r\nlogarithmic scale if desired and can show time. A relative time format is supported\r\nalong with the absolute time format.\r\n\r\nThe minimum and maximum value of an axis can be specified. Autoscaling according\r\nto the data ranges dispayed is also possible.\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    var NINumericFormatters = window.NINumericFormatters;\r\n\r\n    var isTimeAxis = function(format) {\r\n        return (format.indexOf('LVTime') === 0) || (format.indexOf('LVRelativeTime') === 0);\r\n    };\r\n\r\n    var toFlotTimeFormat = function(format) {\r\n        const firstDelimiterIndex = format.indexOf(':');\r\n        const timeFormat = format.substring(firstDelimiterIndex + 1);\r\n        if (format.indexOf('LVTime') === 0) {\r\n            return '%A' + '<' + timeFormat + '>';\r\n        }\r\n\r\n        if (format.indexOf('LVRelativeTime') === 0) {\r\n            return '%r' + '<' + timeFormat + '>';\r\n        }\r\n\r\n        return null;\r\n    };\r\n\r\n    var getDefaultAutoScale = function (axis, scaletype) {\r\n        if (scaletype === \"auto\") {\r\n            if (axis._parentGraph.nodeName === \"NI-INTENSITY-GRAPH\") {\r\n                return \"exact\";\r\n            } else {\r\n                if (axis._parentGraph.nodeName === \"NI-CHART\") {\r\n                    return (axis.axisPosition === \"bottom\" || axis.axisPosition === \"top\")\r\n                        ? \"sliding-window\"\r\n                        : \"loose\";\r\n                }\r\n\r\n                return (axis.axisPosition === \"bottom\" || axis.axisPosition === \"top\")\r\n                    ? \"exact\"\r\n                    : \"loose\";\r\n            }\r\n        }\r\n\r\n        return scaletype;\r\n    };\r\n\r\n    var getWindowSize = function (axis) {\r\n        if (axis._parentGraph.nodeName === \"NI-CHART\" && (axis.axisPosition === \"bottom\" || axis.axisPosition === \"top\")) {\r\n            var windowSize = (axis._defaultMax - axis._defaultMin);\r\n            return (windowSize > 1 ? windowSize : 1024);\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    class CartesianAxis extends window.JQX.BaseElement {\r\n        /**### ni-cartesian-axis properties*/\r\n        static get properties() {\r\n            const props = Object.assign({}, super.properties, {\r\n\r\n                /** **axis-ref** - an axis id used to bind plots to the axes. Default: ''*/\r\n                'axisRef': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **show** (boolean) - if true the axis will be visible. Default: false*/\r\n                'show': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **label** (string) - the name of the axis. Default: '' */\r\n                'label': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /**\r\n                **axis-position** (string) - the position of the axis. Default: 'left'\r\n                 Accepted values: 'top', 'bottom', 'left' and 'right'\r\n                */\r\n                'axisPosition': {\r\n                    value: 'left',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **show-label** (boolean) - if true the axis label will be visible.\r\n                Default: false */\r\n                'showLabel': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **minimum** (number) - the minimum axis value. Default: 0*/\r\n                'minimum': {\r\n                    value: 0,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **maximum** (number) - the maximum axis value. Default: 1*/\r\n                'maximum': {\r\n                    value: 1,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **auto-scale** (string) - if 'exact' or 'loose' the axis will adapt to the data\r\n                ranges of the plots assigned to that axis. if 'none', the axis will adapt to the\r\n                minimum and maximum options. For 'growexact' and 'growloose' the axis will adapt only when\r\n                the new data value is bigger than the old one. Default: 'auto'*/\r\n                'autoScale': {\r\n                    value: 'auto',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **log-scale** (boolean) - if true the axis will be a log axis. Default: false*/\r\n                'logScale': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /**\r\n                **format** (string) - the format of the tick labels. Default: ''\r\n                Possible values: 'LVSI, 'LVTime', 'LVRelativeTime', 'LVRelativeSeconds'.\r\n                Examples:\r\n\r\n                |format|value(s)|formatted value(s)|\r\n                |------|----:|--------------:|\r\n                |_not specified_|0.1234567|0.1234567|\r\n                |LVSI|0.1234567|123.4567m|\r\n                |LVSI:0|0.1234567|123m|\r\n                |LVSI:0.###|0.1234567|123.457m|\r\n                |LVSI:G3|0.1234567|123m|\r\n                |LVSI:G3|1.234567|1.23|\r\n                |LVSI:N3|0.1234567|123.457m|\r\n                |LVTime|0|12:00:00 AM 1/1/0001|\r\n                |LVTime|300|12:05:00 AM 1/1/0001|\r\n                |LVRelativeTime|0, 300, 600|00:00:00, 00:05:00, 00:10:00|\r\n                |LVRelativeTime|300, 600, 900|00:00:00, 00:05:00, 00:10:00|\r\n                |LVRelativeSeconds:300|300|300.0|\r\n                |LVRelativeSeconds:0.###|0.12345678|0.123|\r\n                |LVRelativeSeconds:G3|0.12345678|0.123|\r\n                |LVRelativeSeconds:G3|1.2345678|1.23|\r\n                |LVRelativeSeconds:N3|1234.5678|1234.567|\r\n\r\n                The actual starting time corresponding to the 0 value for the 'LVTime' format\r\n                may vary depending on the time zone.\r\n\r\n                The first value of each axis using the 'LVRelativeTime' format is considered\r\n                the starting point for that axis and it will always be formatted as 00:00:00.\r\n\r\n                The actual number of decimals may be larger than specified for the endpoints.\r\n                When the range of an axis using the 'LVRelativeTime' format is smaller than 1\r\n                minute then the milliseconds will be displayed as well.\r\n\r\n                Other items which are displaying values, like the cursors or cursor legend,\r\n                will use this format as well.\r\n                */\r\n                'format': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /**\r\n                 * This value represents the total milliseconds to offset the formatted display of\r\n                 * absolute time on an axis.\r\n                 * The default will offset a date synonymous with 'new Date(0)' to the date:\r\n                 * '12:00:00 AM 01/01/0001'\r\n                 */\r\n                'timeFormatEpoch': {\r\n                    value: -62135596800000, // Unix epoch offset\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **show-tick-labels** (string) - which of the tick labels are visible.\r\n                Possible values: 'none', 'endpoints', 'major' and 'all'. Default: 'all'.\r\n                For 'endpoints' only the minimum and the maximum values will be visible\r\n                at the edges of the axis. To make some intermediary values visible use\r\n                'major', and 'all' to show all of them.*/\r\n                'showTickLabels': {\r\n                    value: 'all',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **grid-lines** (boolean) - if true the grid lines for the axis will\r\n                be visible. Default: false*/\r\n                'gridLines': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **show-ticks** (boolean) - if true the tick lines for the axis will\r\n                be visible. A tick line is a short line which connects the tick label with\r\n                the axis. Default: false*/\r\n                'showTicks': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **show-minor-ticks** (boolean) - if true the minor tick lines for the axis\r\n                will be visible. Minor tick lines are short lines (half of the tick line\r\n                length) which subdivide the interval between tick lines in five intervals.\r\n                Default: false*/\r\n                'showMinorTicks': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **inverted** (boolean) - if true the axis will display in reverse order\r\n                (max at bottom/left, min at top/right).\r\n                Default: false*/\r\n                inverted: {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **label-width** (number) - sets the axis width as if the labels were\r\n                this fixed width. For x axes this will ensure a padding size equal to half\r\n                this value on the left and right sides of the graph to ensure space for the\r\n                first and last label but will not affect y padding.\r\n                Default: undefined*/\r\n                labelWidth: {\r\n                    value: undefined,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **pan** (string) - what type of panning is allowed for the axis.\r\n                Possible values: 'none', 'axis', 'plot', 'all'. Default: 'all'.\r\n                For 'axis' panning can be done only when the mouse/touch is over the axis,\r\n                while for 'plot', the panning is done only if the entire plot is panned. */\r\n                pan: {\r\n                    value: 'all',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **reserve-space** (boolean) - if true the axis will reserve label-width\r\n                space even if the axis is not shown.\r\n                Default: false*/\r\n                reserveSpace: {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **zoom** (string) - what type of panning is allowed for the axis.\r\n                Possible values: 'none', 'axis', 'plot', 'all'. Default: 'all'.\r\n                For 'axis' zooming can be done only when the mouse/touch is over the axis,\r\n                while for 'plot', the zooming is done only if the entire plot is zommed. */\r\n                zoom: {\r\n                    value: 'all',\r\n                    type: 'string'\r\n                }\r\n            });\r\n\r\n            return props;\r\n        };\r\n\r\n        created() {\r\n            super.created();\r\n\r\n            this._defaultMin = this.minimum;\r\n            this._defaultMax = this.maximum;\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        sendEventToParentGraph(name) {\r\n            var eventConfig;\r\n\r\n            if (this._parentGraph !== undefined) {\r\n                eventConfig = {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this\r\n                    }\r\n                };\r\n\r\n                this._parentGraph.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        attached() {\r\n            super.attached();\r\n\r\n            if (this.parentElement instanceof NationalInstruments.HtmlVI.Elements.CartesianGraphBase && this.parentElement.isReady) {\r\n                this.attachToGraph(this.parentElement);\r\n            } else {\r\n                this._parentGraph = undefined;\r\n            }\r\n            this._defaultMin = this.minimum;\r\n            this._defaultMax = this.maximum;\r\n        };\r\n\r\n        attachToGraph(graph) {\r\n            if (!this._parentGraph) {\r\n                this._parentGraph = graph;\r\n                this.sendEventToParentGraph('ni-cartesian-axis-attached');\r\n            }\r\n        };\r\n\r\n        propertyChangedHandler(propertyName, oldValue, newValue) {\r\n            super.propertyChangedHandler(propertyName, oldValue, newValue);\r\n\r\n            this.sendEventToParentGraph('ni-axis-changed');\r\n        };\r\n\r\n        detached() {\r\n            super.detached();\r\n\r\n            this.sendEventToParentGraph('ni-cartesian-axis-detached');\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        setFont(fontSize, fontFamily, fontWeight, fontStyle, textDecoration) {\r\n            this.style.fontSize = fontSize;\r\n            this.style.fontFamily = fontFamily;\r\n            this.style.fontWeight = fontWeight;\r\n            this.style.fontStyle = fontStyle;\r\n            this.style.textDecoration = textDecoration;\r\n\r\n            this.sendEventToParentGraph('ni-axis-changed');\r\n        };\r\n\r\n        // here we transform the configuration from the one used by the custom element to the one understood by Flot\r\n        getViewConfig() {\r\n            var currStyle = window.getComputedStyle(this),\r\n                grow = (/grow/).test(this.autoScale),\r\n                scaletype = grow ? this.autoScale.replace(/grow/, '') : this.autoScale;\r\n\r\n            var flotConfig = {\r\n                axisLabel: this.showLabel ? this.label : undefined,\r\n                show: this.show,\r\n                position: this.axisPosition,\r\n                min: this.minimum,\r\n                max: this.maximum,\r\n                autoScale: getDefaultAutoScale(this, scaletype),\r\n                windowSize: getWindowSize(this),\r\n                growOnly: grow,\r\n                mode: this.logScale ? 'log' : 'linear',\r\n                element: this,\r\n                format: isTimeAxis(this.format) ? 'time' : null,\r\n                timeformat: toFlotTimeFormat(this.format),\r\n                timeEpoch: this.timeFormatEpoch,\r\n                tickFormatter: NINumericFormatters.getTickFormatter(NINumericFormatters.parseTickFormatterType(this.format)),\r\n                showTickLabels: this.showTickLabels,\r\n                gridLines: this.gridLines,\r\n                showTicks: this.showTicks,\r\n                showMinorTicks: this.showMinorTicks,\r\n                color: currStyle.color,\r\n                offset: this._navigationOffset || {below: 0, above: 0},\r\n                font: {\r\n                    size: parseFloat(currStyle.fontSize),\r\n                    style: currStyle.fontStyle,\r\n                    weight: currStyle.fontWeight,\r\n                    family: currStyle.fontFamily,\r\n                    color: 'inherit'\r\n                },\r\n                axisZoom: this.zoom === 'axis' || this.zoom === 'all',\r\n                plotZoom: this.zoom === 'plot' || this.zoom === 'all',\r\n                axisPan: this.pan === 'axis' || this.pan === 'all',\r\n                plotPan: this.pan === 'plot' || this.pan === 'all',\r\n                inverted: this.inverted,\r\n                labelWidth: this.labelWidth,\r\n                reserveSpace: this.reserveSpace || undefined // flot expects undefined not false\r\n            };\r\n\r\n            return flotConfig;\r\n        };\r\n\r\n        // get the flot axis coresponding to this element\r\n        getFlotAxis() {\r\n            var graph = this._parentGraph.graph;\r\n            var axes = graph.getAxes();\r\n            var that = this;\r\n\r\n            var key = Object.keys(axes).filter(function (axis) {\r\n                return axes[axis].options.element === that;\r\n            })[0];\r\n\r\n            return axes[key];\r\n        };\r\n\r\n        // set the axis min and max to the data min and max\r\n        resetOffset() {\r\n            var axis = this.getFlotAxis(),\r\n                flot = this._parentGraph.graph,\r\n                allSeries = flot.getData(),\r\n                ranges = allSeries\r\n                    .filter(function(series) {\r\n                        return series.xaxis === axis || series.yaxis === axis;\r\n                    })\r\n                    .map(function(series) {\r\n                        return flot.computeRangeForDataSeries(series, true);\r\n                    }),\r\n                defaultRange = {\r\n                    xmin: Number.POSITIVE_INFINITY,\r\n                    ymin: Number.POSITIVE_INFINITY,\r\n                    xmax: Number.NEGATIVE_INFINITY,\r\n                    ymax: Number.NEGATIVE_INFINITY\r\n                },\r\n                range = ranges.reduce(function(p, c) {\r\n                    return {\r\n                        xmin: Math.min(p.xmin, c.xmin),\r\n                        ymin: Math.min(p.ymin, c.ymin),\r\n                        xmax: Math.max(p.xmax, c.xmax),\r\n                        ymax: Math.max(p.ymax, c.ymax)\r\n                    };\r\n                }, defaultRange);\r\n\r\n            this._navigationOffset = axis.options.offset = {below: 0, above: 0};\r\n\r\n            var min = axis.direction === 'x' ? range.xmin : range.ymin;\r\n            var max = axis.direction === 'x' ? range.xmax : range.ymax;\r\n\r\n            this.minimum = min !== Number.POSITIVE_INFINITY ? min : this._defaultMin;\r\n            this.maximum = max !== Number.NEGATIVE_INFINITY ? max : this._defaultMax;\r\n\r\n            this.sendEventToParentGraph('ni-axis-reset');\r\n        };\r\n\r\n        // called after an user interacts with the plot so the attributes of the element are in sync with the plot\r\n        syncWithFlot() {\r\n            var axis = this.getFlotAxis();\r\n\r\n            if (typeof axis.options.min === 'number') {\r\n                this.minimum = axis.options.min;\r\n                this.maximum = axis.options.max;\r\n            }\r\n\r\n            if (typeof axis.options.offset === 'object') {\r\n                this._navigationOffset = {\r\n                    below: axis.options.offset.below,\r\n                    above: axis.options.offset.above\r\n                };\r\n            }\r\n\r\n            if (this._parentGraph !== undefined) {\r\n                this._parentGraph.notifyScaleLegend('ni-axis-changed', this);\r\n            }\r\n        };\r\n\r\n        template() {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    JQX('ni-cartesian-axis', CartesianAxis);\r\n}());\r\n","/*jslint nomen: true, devel:true*/\r\n//****************************************\r\n// Color scale Custom Element\r\n// DOM Registration: HTMLNIColorScale\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-color-scale\r\n\r\n> A color scale added to an intensity graph is used to configure the color\r\ngradients.\r\n\r\n```html\r\n<ni-intensity-graph>\r\n  <ni-cartesian-axis ...></ni-cartesian-axis>\r\n  <ni-cartesian-axis ...></ni-cartesian-axis>\r\n  <ni-color-scale show show-label label=\"Color Scale\" low-color=\"blue\" high-color=\"red\">\r\n  </ni-color-scale>\r\n</ni-intensity-graph>\r\n```\r\n\r\nA single color scale can be added to an intensity graph to visualize and control\r\nthe maping from values to the color gradient displayed.\r\n\r\nColor scales are only supported by intensity graphs, when added to other types of\r\nwebcharts they do nothing.\r\n\r\nThe color gradients are described by an array of stops, for example this:\r\n\r\n```js\r\n[\r\n{\"value\":0,\"color\":\"rgba(0,0,0,1)\"},\r\n{\"value\":0.5,\"color\":\"rgba(0,0,255,1)\"},\r\n{\"value\":1,\"color\":\"rgba(255,255,255,1)\"}\r\n]\r\n```\r\n\r\ndescribes a color gradient going from black at the stop with the value 0, to\r\nblue at the stop with the value 0.5 and then to white at the stop with the value\r\n1.\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    class ColorScale extends window.JQX.BaseElement {\r\n        /** ### ni-color-scale properties*/\r\n        static get properties() {\r\n            const props = Object.assign({}, super.properties, {\r\n\r\n                /** **label** (string) - the name of the color scale. Default: '' */\r\n                'label': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **show** (boolean) - if true the color scale will be visible. Default: false */\r\n                'show': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **show-label** (boolean) - if true the color scale label will be visible. Default: false */\r\n                'showLabel': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **axis-position** (string) - the position of the color scale. Default: 'right'.\r\n                Accepted values: *'left'*, *'right'* */\r\n                'axisPosition': {\r\n                    value: 'right',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **show-tick-labels** (string) - which of the tick labels are visible.\r\n                Possible values: 'none', 'endpoints', 'major' and 'all'. Default: 'all'.\r\n                For 'endpoints' only the minimum and the maximum values will be visible\r\n                at the edges of the axis. To make some intermediary values visible use\r\n                'major', and 'all' to show all of them.*/\r\n                'showTickLabels': {\r\n                    value: 'all',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **high-color** (string) - the color assigned to the values bigger than\r\n                the color scale maximum. Default: '#ffffff'.\r\n                Accepted values: a CSS color string*/\r\n                'highColor': {\r\n                    value: '#ffffff',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **low-color** (string) - the color assigned to the values smaller than\r\n                the color scale minimum. Default: '#000000'.\r\n                Accepted values: a CSS color string*/\r\n                'lowColor': {\r\n                    value: '#000000',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **markers** (string) - the color gradient used to map values to colorScaleAxis.\r\n\r\n                Default: ''.\r\n                TODO: document the gradient format */\r\n                'markers': {\r\n                    // http://colorbrewer2.org/#type=sequential&scheme=Blues&n=3\r\n                    value: `[{\r\n                        \"value\": 0,\r\n                        \"color\": \"#3182bd\"\r\n                    }, {\r\n                        \"value\": 50,\r\n                        \"color\": \"#9ecae1\"\r\n                    }, {\r\n                        \"value\": 100,\r\n                        \"color\": \"#deebf7\"\r\n                    }]`,\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **auto-scale** (string) - if 'exact' the color gradient will strech to adapt to the\r\n                range of the data set provided. Default: 'auto'*/\r\n                'autoScale': {\r\n                    value: 'auto',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **minimum** (number) - the minimum axis value. Default: 0*/\r\n                'minimum': {\r\n                    value: 0,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **maximum** (number) - the maximum axis value. Default: 1*/\r\n                'maximum': {\r\n                    value: 1,\r\n                    type: 'number'\r\n                }\r\n            });\r\n\r\n            return props;\r\n        };\r\n\r\n        created() {\r\n            super.created();\r\n\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        sendEventToParentGraph(name) {\r\n            var eventConfig;\r\n\r\n            if (this._parentGraph !== undefined) {\r\n                eventConfig = {\r\n                    bubbles: true,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this\r\n                    }\r\n                };\r\n\r\n                this._parentGraph.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        attached() {\r\n            super.attached();\r\n\r\n            if (this.parentElement instanceof JQX.IntensityGraph && this.parentElement.isReady) {\r\n                this.attachToGraph(this.parentElement);\r\n            } else {\r\n                this._parentGraph = undefined;\r\n            }\r\n        };\r\n\r\n        attachToGraph(graph) {\r\n            if (!this._parentGraph) {\r\n                this._parentGraph = this.parentElement;\r\n                this.sendEventToParentGraph('ni-cartesian-axis-attached');\r\n            }\r\n        };\r\n\r\n        propertyChangedHandler(propertyName, oldValue, newValue) {\r\n            super.propertyChangedHandler(propertyName, oldValue, newValue);\r\n\r\n            this.sendEventToParentGraph('ni-axis-changed');\r\n        };\r\n\r\n        detached() {\r\n            super.detached();\r\n\r\n            this.sendEventToParentGraph('ni-cartesian-axis-detached');\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        setFont(fontSize, fontFamily, fontWeight, fontStyle, textDecoration) {\r\n            this.style.fontSize = fontSize;\r\n            this.style.fontFamily = fontFamily;\r\n            this.style.fontWeight = fontWeight;\r\n            this.style.fontStyle = fontStyle;\r\n            this.style.textDecoration = textDecoration;\r\n\r\n            this.sendEventToParentGraph('ni-axis-changed');\r\n        };\r\n\r\n        // getViewConfig transforms the configuration from the one used by the custom element to the one understood by Flot */\r\n        getViewConfig() {\r\n            var currStyle = window.getComputedStyle(this),\r\n                grow = (/grow/).test(this.autoScale),\r\n                autoScale = grow ? this.autoScale.replace(/grow/, '') : this.autoScale;\r\n\r\n            var flotConfig = {\r\n                type: JQX.IntensityGraph.ColorScaleType,\r\n                axisLabel: this.showLabel ? this.label : undefined,\r\n                show: this.show,\r\n                autoScale: ((autoScale === \"auto\") ? \"none\" : autoScale),\r\n                growOnly: grow,\r\n                min: this.minimum,\r\n                max: this.maximum,\r\n                position: this.axisPosition,\r\n                lowColor: this.lowColor,\r\n                highColor: this.highColor,\r\n                markers: this.markers,\r\n                showTickLabels: this.showTickLabels,\r\n                font: {\r\n                    size: parseFloat(currStyle.fontSize),\r\n                    style: currStyle.fontStyle,\r\n                    weight: currStyle.fontWeight,\r\n                    family: currStyle.fontFamily,\r\n                    color: 'inherit'\r\n                },\r\n                axisZoom: false,\r\n                plotZoom: false,\r\n                axisPan: false,\r\n                plotPan: false,\r\n                gridLines: false\r\n            };\r\n\r\n            return flotConfig;\r\n        };\r\n\r\n        template() {\r\n            return '';\r\n        }\r\n\r\n        // get the flot axis coresponding to this element\r\n        getFlotAxis() {\r\n            if (this._parentGraph) {\r\n                var colorScaleAxis = this._parentGraph.graph\r\n                    .getYAxes()\r\n                    .filter(function(axis) {\r\n                        return axis.options.type === JQX.IntensityGraph.ColorScaleType;\r\n                    })[0];\r\n                return colorScaleAxis;\r\n            }\r\n        };\r\n    };\r\n\r\n    JQX('ni-color-scale', ColorScale);\r\n}());\r\n","/*jslint nomen: true, devel:true*/\r\n//****************************************\r\n// Cartesian Plot\r\n// DOM Registration: HTMLNICartesianPlot\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-cartesian-plot\r\n\r\n> A custom element that, along with a nested ni-cartesian-plot-renderer describes\r\nthe way a data plot is rendered.\r\n\r\nA plot is the graphic representation of a data set. A graph or chart can show\r\nsimultaneously multiple data sets (plots). To customize how a data set, or plot\r\nis rendered use ni-cartesian-plot elements nested inside a graph or chart\r\nelement.\r\n\r\n```html\r\n<ni-cartesian-graph>\r\n  <ni-cartesian-axis axis-ref=\"axis1ref\" show axis-position=\"bottom\"></ni-cartesian-axis>\r\n  <ni-cartesian-axis axis-ref=\"axis2ref\" show axis-position=\"left\"></ni-cartesian-axis>\r\n  <ni-cartesian-plot show label=\"plot 1\" xaxis=\"axis1ref\" yaxis=\"axis2ref\">\r\n    add an ni-cartesian-plot-renderer here\r\n  </ni-cartesian-plot>\r\n</ni-cartesian-graph>\r\n```\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    // Static Private Variables\r\n    var defaultPlotConfig = {\r\n        lines: {\r\n            show: false\r\n        }\r\n    };\r\n\r\n    class CartesianPlot extends window.JQX.BaseElement {\r\n        /** ### ni-cartesian-plot properties */\r\n        static get properties() {\r\n            const props = Object.assign({}, super.properties, {\r\n\r\n                /** **show** (boolean) - if true the plot will be shown. Default: false */\r\n                'show': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **label** (string) - the name of the plot. Default: '' */\r\n                'label': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **xaxis** (string) - the X axis that this plot will use. Default: ''.\r\n                Accepted values: an axis-ref. In case an xaxis with the specified axis-ref\r\n                is not found the first xaxis is used*/\r\n                'xaxis': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **yaxis** (string) - the Y axis that this plot will use. Default: ''.\r\n                Accepted values: an axis-ref. In case an yaxis with the specified axis-ref\r\n                is not found the first yaxis is used*/\r\n                'yaxis': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **enable-hover** (boolean) - if true, when the mouse hovers close to a point on the plot\r\n                or a tap on a point is done, a tooltip with the point value will be shown */\r\n                'enableHover': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **enable-click** (boolean) - if true, when there is a click or tap near or on a point,\r\n                a plotclick event will be fired */\r\n                'enableClick': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **hover-format** (string) - specifies the format of the text shown in the tooltip.*/\r\n                'hoverFormat': {\r\n                    value: '',\r\n                    type: 'string'\r\n                }\r\n            });\r\n\r\n            return props;\r\n        };\r\n\r\n        /*\r\n        Reset the autoScale of axis.\r\n        Options can have the following fields: axisRef, autoScale, minimum, maximum;\r\n        */\r\n        reset(options) {\r\n            var axes,\r\n                allAxes = this._parentGraph.axes;\r\n\r\n            if (options.axisRef) {\r\n                axes = allAxes.filter(function (a) {\r\n                    return a.axisRef === options.axisRef;\r\n                });\r\n            }\r\n\r\n            if (!axes) {\r\n                axes = allAxes;\r\n            }\r\n\r\n            if (options.autoScale !== 'none') {\r\n                axes.forEach(function(axis) {\r\n                    axis.autoScale = options.autoScale;\r\n                    axis.resetOffset();\r\n                });\r\n            } else {\r\n                if (options.minimum && options.maximum) {\r\n                    axes.forEach(function(axis) {\r\n                        axis.minimum = options.minimum;\r\n                        axis.maximum = options.maximum;\r\n                        axis.sendEventToParentGraph('ni-axis-changed');\r\n                    });\r\n                } else {\r\n                    axes.forEach(function(axis) {\r\n                        axis.autoScale = options.autoScale;\r\n                        axis.resetOffset();\r\n                        var flotAxis = axis.getFlotAxis();\r\n                        flotAxis.min = axis.minimum;\r\n                        flotAxis.max = axis.maximum;\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        created() {\r\n            super.created();\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        sendEventToParentGraph (name, originalSource) {\r\n            var eventConfig;\r\n\r\n            if (this._parentGraph !== undefined) {\r\n                eventConfig = {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this,\r\n                        originalSource: originalSource\r\n                    }\r\n                };\r\n\r\n                this._parentGraph.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        attached () {\r\n            super.attached();\r\n\r\n            if ((this.parentElement instanceof JQX.CartesianGraph || this.parentElement instanceof JQX.Chart) &&\r\n                this.parentElement.isReady) {\r\n                this.attachToGraph(this.parentElement);\r\n            } else {\r\n                this._parentGraph = undefined;\r\n            }\r\n        };\r\n\r\n        attachToGraph(graph) {\r\n            if (!this._parentGraph) {\r\n                this._parentGraph = graph;\r\n                this.addPlotItemListeners();\r\n                this.attachChildren();\r\n                this.sendEventToParentGraph('ni-cartesian-plot-attached');\r\n            }\r\n        };\r\n\r\n        attachChildren() {\r\n            var graphElement = this,\r\n                children = this.children;\r\n\r\n            for (var i = 0; i < children.length; i++) {\r\n                var element = children[i];\r\n                if (element.tagName === 'NI-CARTESIAN-PLOT-RENDERER' && element instanceof window.JQX.CartesianPlotRenderer && element.isReady) {\r\n                    element.attachToPlot(graphElement);\r\n                }\r\n            }\r\n        };\r\n\r\n        addPlotItemListeners () {\r\n            var that = this;\r\n            that.addEventListener('ni-cartesian-plot-renderer-attached', function(evt) {\r\n                if (evt.target === that) {\r\n                    this.plotRenderer = evt.detail.element;\r\n                    this.sendEventToParentGraph('ni-cartesian-plot-renderer-attached', evt.detail.element);\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-plot-renderer-detached', function(evt) {\r\n                if (evt.target === that) {\r\n                    this.plotRenderer = undefined;\r\n                    this.sendEventToParentGraph('ni-cartesian-plot-renderer-detached', evt.detail.element);\r\n                }\r\n            });\r\n\r\n            that.addEventListener('ni-cartesian-plot-renderer-changed', function(evt) {\r\n                if (evt.target === that) {\r\n                    this.sendEventToParentGraph('ni-cartesian-plot-renderer-changed', evt.detail.element);\r\n                }\r\n            });\r\n        };\r\n\r\n        detached () {\r\n            super.detached();\r\n\r\n            this.sendEventToParentGraph('ni-cartesian-plot-detached');\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        propertyChangedHandler(propertyName, oldValue, newValue) {\r\n            super.propertyChangedHandler(propertyName, oldValue, newValue);\r\n\r\n            this.sendEventToParentGraph('ni-cartesian-plot-changed');\r\n        };\r\n\r\n        getViewConfig () {\r\n            var plotConfig = defaultPlotConfig;\r\n            if (this.plotRenderer !== undefined && this.show === true) {\r\n                plotConfig = this.plotRenderer.getViewConfig();\r\n            }\r\n\r\n            plotConfig.label = this.label;\r\n            plotConfig.hoverable = this.enableHover;\r\n            plotConfig.clickable = this.enableClick;\r\n            plotConfig.xaxis = this._parentGraph.getXAxisIndexByNIControlID(this.xaxis);\r\n            plotConfig.yaxis = this._parentGraph.getYAxisIndexByNIControlID(this.yaxis);\r\n\r\n            return plotConfig;\r\n        };\r\n\r\n        template () {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    JQX('ni-cartesian-plot', CartesianPlot);\r\n}());\r\n","/*jslint nomen: true, devel:true*/\r\n//****************************************\r\n// Cartesian Plot Renderer\r\n// DOM Registration: HTMLNICartesianPlotRenderer\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-cartesian-plot-renderer\r\n\r\n> Describes the way a plot is rendered\r\n\r\nThe four ways to render a plot are the line renderer, the area fill renderer,\r\nthe points renderer and the bar renderer. You can combine these in any way you\r\nlike for a single plot and different plots can have different renderers.\r\n\r\nThe fastest one is the line renderer and this is the recomended one for large\r\ndata sets and if you care about performance.\r\n\r\nThe render can be further customized by using the renderer properties.\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    var toFillTowards = function(baseLine) {\r\n        switch (baseLine) {\r\n            case 'zero':\r\n                return 0;\r\n            case 'infinity':\r\n                return Infinity;\r\n            case 'positiveinfinity':\r\n                return Infinity;\r\n            case '-infinity':\r\n                return -Infinity;\r\n            case 'negativeinfinity':\r\n                return -Infinity;\r\n            default:\r\n                return undefined;\r\n        }\r\n    };\r\n\r\n    var areaFillOpacity = 0.6;\r\n\r\n    class CartesianPlotRenderer extends window.JQX.BaseElement {\r\n        /** ### ni-cartesian-plot-renderer properties */\r\n        static get properties() {\r\n            const props = Object.assign({}, super.properties, {\r\n\r\n                /** **line-stroke** (string) - the color of the line drawn. Default: 'auto'.\r\n                Accepted values: a CSS color string, an empty string or 'auto'. If an empty string\r\n                is passed the line rendering for the plot is disabled. If 'auto' is passed a color\r\n                will be automatically assigned to the plot.\r\n                */\r\n                'lineStroke': {\r\n                    value: 'auto',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **line-width** (number) - the width of the line. Use 1 for maximum\r\n                performance as thicker lines can be slower, depending on the browser and\r\n                the graphic card used. Default: 1*/\r\n                'lineWidth': {\r\n                    value: 1,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **line-style** (string) - the style of the line drawn. Default: 'solid'.\r\n                Accepted values: *'solid'*, *'dot'*, *'mediumdash'*, *'dashdot'* and *'largedash'*\r\n                */\r\n                'lineStyle': {\r\n                    value: 'solid',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **area-fill** (string) - the color of the area fill drawn under/over\r\n                the line. Default: ''.\r\n                Accepted values: a CSS color string, an empty string or auto. If an empty string\r\n                is passed the area fill for the plot is disabled. If 'auto' is passed a color\r\n                will be automatically assigned to the fill.\r\n                */\r\n                'areaFill': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /**\r\n                **area-base-line** (string) - determines the direction the area fill.\r\n                Default: 'zero'. Accepted values:\r\n\r\n                * 'zero': fill the line towards 0\r\n                * '-infinity': fill the line towards -Infinity.\r\n                * 'infinity': fill the line towards Infinity.\r\n                */\r\n                'areaBaseLine': {\r\n                    value: 'zero',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **bar-fill** (string) - the color of the bars drawn. Default: ''.\r\n                Accepted values: a CSS color string, an empty string or auto. If an empty\r\n                string is passed the bars rendering for the plot is disabled. If 'auto'\r\n                is passed a color will be automatically assigned to the bars.\r\n                */\r\n                'barFill': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /**\r\n                **bar-base-line** (string) - determines the direction the bar fill.\r\n                Default: 'zero'. Accepted values:\r\n\r\n                * 'zero': fill the line towards 0\r\n                * '-infinity': fill the line towards -Infinity.\r\n                * 'infinity': fill the line towards Infinity.\r\n                */\r\n                'barBaseLine': {\r\n                    value: 'zero',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **point-color** (string) - the color of the points drawn. Default: ''.\r\n                Accepted values: a CSS color string, an empty string or auto. If an empty\r\n                string is passed the points rendering for the plot is disabled. If 'auto'\r\n                is passed a color will be automatically assigned to the points.\r\n                */\r\n                'pointColor': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **point-size** (number) - the size of the points drawn. Default: 5.*/\r\n                'pointSize': {\r\n                    value: 5,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **point-shape** (string) - determines the shape of the points.\r\n                Default: 'ellipse'. Accepted values: 'ellipse', 'square', 'diamond',\r\n                'triangle', 'cross'\r\n                */\r\n                'pointShape': {\r\n                    value: 'ellipse',\r\n                    type: 'string'\r\n                }\r\n            });\r\n\r\n            return props;\r\n        };\r\n\r\n        created() {\r\n            super.created();\r\n\r\n            // Public Instance Properties\r\n            // None\r\n\r\n            // Private Instance Properties\r\n            this._parentPlot = undefined;\r\n        };\r\n\r\n        sendEventToParentPlot(name) {\r\n            var eventConfig;\r\n\r\n            if (this._parentPlot !== undefined) {\r\n                eventConfig = {\r\n                    bubbles: false,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this\r\n                    }\r\n                };\r\n\r\n                this._parentPlot.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        attached() {\r\n            super.attached();\r\n\r\n            if (this.parentElement instanceof JQX.CartesianPlot && this.parentElement.isReady) {\r\n                this.attachToPlot(this.parentElement);\r\n            } else {\r\n                this._parentPlot = undefined;\r\n            }\r\n        };\r\n\r\n        attachToPlot(plot) {\r\n            this._parentPlot = plot;\r\n            this.sendEventToParentPlot('ni-cartesian-plot-renderer-attached');\r\n        };\r\n\r\n        propertyChangedHandler(propertyName, oldValue, newValue) {\r\n            super.propertyChangedHandler(propertyName, oldValue, newValue);\r\n\r\n            this.sendEventToParentPlot('ni-cartesian-plot-renderer-changed');\r\n        };\r\n\r\n        detached() {\r\n            super.detached();\r\n\r\n            this.sendEventToParentPlot('ni-cartesian-plot-renderer-detached');\r\n        };\r\n\r\n        toFlotLineStyle(style) {\r\n            switch (style) {\r\n                case 'solid':\r\n                    return undefined;\r\n                case 'dot':\r\n                    return [this.lineWidth, this.lineWidth * 2];\r\n                case 'mediumdash':\r\n                    return [this.lineWidth * 3, this.lineWidth * 2];\r\n                case 'dashdot':\r\n                    return [this.lineWidth * 3, this.lineWidth * 2, this.lineWidth, this.lineWidth * 2];\r\n                case 'largedash':\r\n                    return [this.lineWidth * 5, this.lineWidth * 3];\r\n                default:\r\n                    return undefined;\r\n            }\r\n        };\r\n\r\n        getColor() {\r\n            var color = this.lineStroke || this.pointColor || this.areaFill || this.barFill;\r\n            if (color === 'auto') {\r\n                return null;\r\n            }\r\n\r\n            return color;\r\n        };\r\n\r\n        getViewConfig() {\r\n            return {\r\n                color: this.getColor(),\r\n                lines: {\r\n                    show: this.lineStroke !== '' || this.areaFill !== '',\r\n                    lineWidth: this.lineWidth,\r\n                    fill: this.areaFill !== '' ? areaFillOpacity : false,\r\n                    zero: false,\r\n                    fillTowards: toFillTowards(this.areaBaseLine),\r\n                    dashes: this.toFlotLineStyle(this.lineStyle)\r\n                },\r\n                points: {\r\n                    show: this.pointColor !== '',\r\n                    radius: this.pointSize ? this.pointSize / 2 : 2,\r\n                    symbol: this.pointShape\r\n                },\r\n                bars: {\r\n                    show: this.barFill !== '',\r\n                    barWidth: 0.75, // TODO this is only valid if the distance between points is 1\r\n                    align: 'center',\r\n                    zero: false,\r\n                    fillTowards: toFillTowards(this.barBaseLine)\r\n                }\r\n            };\r\n        };\r\n\r\n        template () {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    JQX('ni-cartesian-plot-renderer', CartesianPlotRenderer);\r\n}());\r\n","//****************************************\r\n// Cursor Custom Element\r\n// DOM Registration: HTMLNICursor\r\n// National Instruments Copyright 2017\r\n//****************************************\r\n\r\n/**\r\n## ni-cursor\r\n\r\n> Add cursors to a graph.\r\n\r\nSometimes you want to take a measurement off a graph you have made. Cursors allow\r\nyou to do that.\r\n\r\n```html\r\n<ni-cartesian-graph>\r\n  <ni-cartesian-axis show grid-lines show-label label=\"Axis 1\" axis-position='bottom'>\r\n  </ni-cartesian-axis>\r\n  <ni-cartesian-axis show grid-lines show-label label=\"Axis 2\" axis-position='top'>\r\n  </ni-cartesian-axis>\r\n  <ni-cursor label=\"Cursor 1\" show show-label snap-to-plot=\"0\"></ni-cursor>\r\n</ni-cartesian-graph>\r\n```\r\nMultiple cursors can be added to a graph and configured.\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    var $ = NationalInstruments.Globals.jQuery;\r\n\r\n    class Cursor extends window.JQX.BaseElement {\r\n        /** ### ni-cursor properties*/\r\n        static get properties() {\r\n            const props = Object.assign({}, super.properties, {\r\n\r\n                /** **show** (boolean) - if true the cursor will be visible. Default: false*/\r\n                'show': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **label** (string) - the label of the cursor. Default: ''*/\r\n                'label': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **show-label** (boolean) - if true the cursor label will be visible.\r\n                Default: false*/\r\n                'showLabel': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /**\r\n                **target-shape** (string) - the shape of cursor. Default: 'ellipse'.\r\n                Accepted values: 'ellipse', 'square', 'diamond', 'triangle', 'cross'*/\r\n                'targetShape': {\r\n                    value: 'ellipse',\r\n                    type: 'string'\r\n                },\r\n\r\n                /**\r\n                **crosshair-style** (string) - the shape of crosshair. Default: 'both'.\r\n                Accepted values: 'both', 'vertical', 'horizontal', 'none'*/\r\n                'crosshairStyle': {\r\n                    value: 'both',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **show-value** (boolean) - if true the coordinates of the cursor will\r\n                be visible. Default: false*/\r\n                'showValue': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **snap-to-plot** (number) - the number of the plot or -1 to snap to any plot.\r\n                Default: undefined (no snapping)*/\r\n                'snapToPlot': {\r\n                    value: undefined,\r\n                    type: 'number?'\r\n                },\r\n\r\n                /** **interpolate** (boolean) - if true the cursor will do a linear interpolation\r\n                between points when modiffying position. Default: false\r\n                */\r\n                'interpolate': {\r\n                    value: false,\r\n                    type: 'boolean'\r\n                },\r\n\r\n                /** **xaxis** (string) - the X axis that this cursor will use when snap-to-plot is undefined.\r\n                Default: ''. Accepted values: an axis-ref. In case an xaxis with the specified axis-ref\r\n                is not found the first xaxis is used*/\r\n                'xaxis': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **yaxis** (string) - the Y axis that this cursor will use when snap-to-plot is undefined.\r\n                Default: ''. Accepted values: an axis-ref. In case an yaxis with the specified axis-ref\r\n                is not found the first yaxis is used*/\r\n                'yaxis': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **x** (number) - the x target coordinate of the cursor. This coordinate\r\n                is relative to the visible area of the graph, in the interval 0 to 1.\r\n                0 is on the left edge and 1 on the one to the right.\r\n                Default: 0.5*/\r\n                'x': {\r\n                    value: 0.5,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **y** (number) - the y target coordinate of the cursor. This coordinate\r\n                is relative to the visible area of the graph, in the interval 0 to 1.\r\n                0 is on the bottom edge and 1 on the top one.\r\n                Default: 0.5*/\r\n                'y': {\r\n                    value: 0.5,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **font-family** (string) - the font used for cursor label and values.\r\n                Default: 'sans-serif'*/\r\n                'fontFamily': {\r\n                    value: 'sans-serif',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **font-size** (string) - the font size used for cursor label and values.\r\n                Default: '10px'*/\r\n                'fontSize': {\r\n                    value: '10px',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **font-style** (string) - the font style used for cursor label and values.\r\n                Default: ''*/\r\n                'fontStyle': {\r\n                    value: '',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **show-thumbs** (string) - the visibility of thumbs and axis on which they appear.\r\n                Default: 'none'. Accepted values: 'r', 'l', 'b', 't', 'none'*/\r\n                'showThumbs': {\r\n                    value: 'none',\r\n                    type: 'string'\r\n                },\r\n\r\n                /** **dashes** (number) - how many dashes should be used to draw the cursor line.\r\n                Default: '1' (draws a solid line cursor). Accepted values: 1 or greater than 1.*/\r\n                'dashes': {\r\n                    value: 1,\r\n                    type: 'number'\r\n                },\r\n\r\n                /** **thumb-label** (string) - the text to use on the thumb for the cursor.\r\n                Default: '' (no label).*/\r\n                'thumbLabel': {\r\n                    value: '',\r\n                    type: 'string'\r\n                }\r\n            });\r\n\r\n            return props;\r\n        };\r\n\r\n        created() {\r\n            super.created();\r\n            this.cursor = null;\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        sendEventToParentGraph(name) {\r\n            var eventConfig;\r\n\r\n            if (this._parentGraph !== undefined) {\r\n                eventConfig = {\r\n                    bubbles: true,\r\n                    cancelable: true,\r\n                    detail: {\r\n                        element: this\r\n                    }\r\n                };\r\n\r\n                this._parentGraph.dispatchEvent(new CustomEvent(name, eventConfig));\r\n            }\r\n        };\r\n\r\n        attached() {\r\n            super.attached();\r\n\r\n            if ((this.parentElement instanceof JQX.CartesianGraph || this.parentElement instanceof JQX.Chart) &&\r\n                this.parentElement.isReady) {\r\n                this.attachToGraph(this.parentElement);\r\n            } else {\r\n                this._parentGraph = undefined;\r\n            }\r\n        };\r\n\r\n        attachToGraph(graph) {\r\n            if (!this._parentGraph) {\r\n                this._parentGraph = graph;\r\n                this.sendEventToParentGraph('ni-cursor-attached');\r\n            }\r\n        };\r\n\r\n        /** TODO: clean up and document the events generated by cursors*/\r\n        propertyChangedHandler(propertyName, oldValue, newValue) {\r\n            super.propertyChangedHandler(propertyName, oldValue, newValue);\r\n\r\n            this.sendEventToParentGraph('ni-cursor-changed');\r\n        };\r\n\r\n        detached() {\r\n            super.detached();\r\n\r\n            this.sendEventToParentGraph('ni-cursor-detached');\r\n            this._parentGraph = undefined;\r\n        };\r\n\r\n        setCursor(cursor) {\r\n            this.cursor = cursor;\r\n        };\r\n\r\n        updateCursorElement(data) {\r\n            this.x = this.cursor.position.relativeX;\r\n            this.y = this.cursor.position.relativeY;\r\n            if (this._parentGraph) {\r\n                $(this).trigger('cursorUpdated', data);\r\n            }\r\n        };\r\n\r\n        getViewConfig () {\r\n            var style = window.getComputedStyle(this);\r\n            var crosshairStyle = this.crosshairStyle;\r\n            var mode;\r\n\r\n            if (crosshairStyle === 'both') {\r\n                mode = 'xy';\r\n            } else if (crosshairStyle === 'horizontal') {\r\n                mode = 'y';\r\n            } else if (crosshairStyle === 'vertical') {\r\n                mode = 'x';\r\n            } else if (crosshairStyle === 'none') {\r\n                mode = '';\r\n            } else {\r\n                mode = null;\r\n            }\r\n\r\n            return {\r\n                show: this.show,\r\n                showLabel: this.showLabel,\r\n                showValues: this.showValue,\r\n                name: this.label,\r\n                snapToPlot: this.snapToPlot,\r\n                interpolate: this.interpolate,\r\n                defaultxaxis: this._parentGraph.getXAxisIndexByNIControlID(this.xaxis),\r\n                defaultyaxis: this._parentGraph.getYAxisIndexByNIControlID(this.yaxis),\r\n                mode: mode,\r\n                symbol: this.targetShape,\r\n                color: style.color,\r\n                fontSize: style.fontSize,\r\n                fontFamily: style.fontFamily,\r\n                fontStyle: style.fontStyle,\r\n                fontWeight: style.fontWeight,\r\n                position: {\r\n                    relativeX: this.x,\r\n                    relativeY: this.y\r\n                },\r\n                showThumbs: this.showThumbs,\r\n                dashes: this.dashes,\r\n                thumbAbbreviation: this.thumbLabel\r\n            };\r\n        };\r\n\r\n        setFont(fontSize, fontFamily, fontWeight, fontStyle, textDecoration) {\r\n            this.style.fontSize = fontSize;\r\n            this.style.fontFamily = fontFamily;\r\n            this.style.fontWeight = fontWeight;\r\n            this.style.textDecoration = textDecoration;\r\n\r\n            this.sendEventToParentGraph('ni-cursor-changed');\r\n        };\r\n\r\n        setColor(color) {\r\n            this.style.color = color;\r\n            this.sendEventToParentGraph('ni-cursor-changed');\r\n        }\r\n\r\n        template() {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    JQX('ni-cursor', Cursor);\r\n}());\r\n","/**\r\n# TypedWebCharts Plugin\r\n\r\n> Allows setting data types to WebCharts.\r\n\r\nThe information of the data type will be used to optimize setting\r\nor pushing new data to the WebCharts.\r\n\r\nExample:\r\n```html\r\n<ni-cartesian-graph value=\"[[1, 2, 3, 4, 5]]\" ni-type=\"{&quot;name&quot;:&quot;Array&quot;,&quot;rank&quot;:1,&quot;subtype&quot;:{&quot;name&quot;:&quot;Double&quot;}}\">\r\n</ni-cartesian-graph>\r\n```\r\n\r\n*/\r\n\r\n(function() {\r\n    'use strict';\r\n\r\n    var DataPipeline = NationalInstruments.HtmlVI.DataPipeline,\r\n        TypedHistoryBuffer = NationalInstruments.HtmlVI.DataPipeline.TypedHistoryBuffer;\r\n\r\n    /** ## ni-cartesian-graph module */\r\n    class NITypedCartesianGraphModule {\r\n        static get properties() {\r\n            const properties = {\r\n                /** **ni-type** - the data type of the values being written to the\r\n                value property or setData() method */\r\n                'niType': {\r\n                    value: undefined,\r\n                    type: 'string?',\r\n                    observer: 'setNIType'\r\n                }\r\n            };\r\n            return properties;\r\n        }\r\n\r\n        static get moduleName() {\r\n            return 'NITypedCartesianGraphModule';\r\n        }\r\n\r\n        setNIType(oldValue, newValue) {\r\n            this.ownerElement.valueTypeNeedsUpdate = true;\r\n        }\r\n\r\n        created() {\r\n            this.ownerElement.valueType = DataPipeline.DataTypesEnum.unknown;\r\n            this.ownerElement.valueTypeNeedsUpdate = false;\r\n        }\r\n\r\n        attached() {\r\n            this.ownerElement.valueType = DataPipeline.inferDataTypeFromNIType(createNIType(this.ownerElement.niType));\r\n            this.ownerElement.valueTypeNeedsUpdate = false;\r\n        }\r\n\r\n        setData(data) {\r\n            if (this.ownerElement.valueTypeNeedsUpdate) {\r\n                this.ownerElement.valueType = DataPipeline.inferDataTypeFromNIType(createNIType(this.ownerElement.niType));\r\n                this.ownerElement.valueTypeNeedsUpdate = false;\r\n            }\r\n            window.NationalInstruments.HtmlVI.Elements.CartesianGraphBase.prototype.setData.call(this.ownerElement, data)\r\n        }\r\n    }\r\n\r\n    /** ## ni-cartesian-graph module */\r\n    class NITypedChartModule {\r\n        static get properties() {\r\n            const properties = {\r\n                /** **ni-type** - the data type of the values being pushed to the history buffer. */\r\n                'niType': {\r\n                    value: undefined,\r\n                    type: 'string?',\r\n                    observer: 'setNIType'\r\n                }\r\n            };\r\n            return properties;\r\n        }\r\n\r\n        static get moduleName() {\r\n            return 'NITypedChartModule';\r\n        }\r\n\r\n        setNIType(oldValue, newValue) {\r\n            setNITypeToHistoryBuffer(this.ownerElement.historyBuffer, this.ownerElement.niType);\r\n        }\r\n\r\n        ready() {\r\n            this.ownerElement.historyBuffer = new TypedHistoryBuffer(this.ownerElement.bufferSize, 1);\r\n            setNITypeToHistoryBuffer(this.ownerElement.historyBuffer, this.ownerElement.niType);\r\n        }\r\n\r\n        setHistoryBuffer(historyBuffer) {\r\n            this.ownerElement.historyBuffer = historyBuffer;\r\n            setNITypeToHistoryBuffer(this.ownerElement.historyBuffer, this.ownerElement.niType);\r\n        }\r\n    }\r\n\r\n    /** ## ni-intensity-graph module */\r\n    class NITypedIntensityGraphModule {\r\n        static get properties() {\r\n            const properties = {\r\n                /** **ni-type** - for now this is not used */\r\n                'niType': {\r\n                    value: NITypes.DOUBLE.makeArray(2).toJSON(),\r\n                    type: 'string?'\r\n                }\r\n            };\r\n            return properties;\r\n        }\r\n\r\n        static get moduleName() {\r\n            return 'NITypedIntensityGraphModule';\r\n        }\r\n    }\r\n\r\n    function createNIType(descriptor) {\r\n        var niType = null;\r\n        try {\r\n            if (descriptor) {\r\n                niType = new NIType(descriptor);\r\n            }\r\n        } catch (err) {}\r\n        return niType;\r\n    }\r\n\r\n    function setNITypeToHistoryBuffer(historyBuffer, niTypeStr) {\r\n        if (typeof historyBuffer.setNIType === 'function') {\r\n            historyBuffer.setNIType(createNIType(niTypeStr));\r\n        }\r\n    };\r\n\r\n    JQX.Elements.whenRegistered('ni-cartesian-graph', function(proto) {\r\n        proto.addModule(NITypedCartesianGraphModule);\r\n    });\r\n\r\n    JQX.Elements.whenRegistered('ni-chart', function(proto) {\r\n        proto.addModule(NITypedChartModule);\r\n    });\r\n\r\n    JQX.Elements.whenRegistered('ni-intensity-graph', function(proto) {\r\n        proto.addModule(NITypedIntensityGraphModule);\r\n    });\r\n}());\r\n"]}