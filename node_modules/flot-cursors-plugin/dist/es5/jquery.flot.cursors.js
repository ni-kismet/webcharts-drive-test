'use strict';

(function ($) {
    'use strict';

    $.thumb = {};

    var currentState;

    $.thumb.createSVGLayer = function (placeholder, eventHolder) {
        if (placeholder && placeholder.find('.flot-thumbs')[0]) {
            return placeholder.find('.flot-thumbs')[0].firstChild;
        }

        var SVGContainer = document.createElement('div');
        SVGContainer.className = 'flot-thumbs';
        SVGContainer.style.position = 'absolute';
        SVGContainer.style.top = '0px';
        SVGContainer.style.left = '0px';
        SVGContainer.style.bottom = '0px';
        SVGContainer.style.right = '0px';
        SVGContainer.style.pointerEvents = 'none';

        var svgLayer = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svgLayer.setAttributeNS(null, 'width', '100%');
        svgLayer.setAttributeNS(null, 'height', '100%');

        var svgThumbsSymbols = '\n            <symbol id="round" viewBox="0 0 50 50">\n                <polyline points="25,0 40,20 10,20 25,0"></polyline>\n                <circle cx="25" cy="25" r="20"/>\n            </symbol>\n            <symbol id="l_round" viewBox="0 0 50 50">\n                <use xlink:href="#round" x="0" y="0" width="50" height="50" transform="rotate(90 25 25)"/>\n            </symbol>\n            <symbol id="r_round" viewBox="0 0 50 50">\n                <use xlink:href="#round" x="0" y="0" width="50" height="50" transform="rotate(270 25 25)"/>\n            </symbol>\n            <symbol id="b_round" viewBox="0 0 50 50">\n                <use xlink:href="#round" x="0" y="0" width="50" height="50" transform="rotate(0 25 25)"/>\n            </symbol>\n            <symbol id="t_round" viewBox="0 0 50 50">\n                <use xlink:href="#round" x="0" y="0" width="50" height="50" transform="rotate(180 25 25)"/>\n            </symbol>';

        var svgDefs = document.createElementNS('http://www.w3.org/2000/svg', 'defs');
        svgDefs.innerHTML = svgThumbsSymbols;
        svgLayer.appendChild(svgDefs);

        SVGContainer.appendChild(svgLayer);

        if (placeholder) {
            placeholder.append(SVGContainer);
        } else {
            document.body.appendChild(SVGContainer);
        }

        svgLayer.eventHolder = eventHolder || document;
        bindEvents(svgLayer);

        return svgLayer;
    };

    $.thumb.createThumb = function (options) {
        var opts = {
            size: options.size || 20,
            x: options.x || 0,
            y: options.y || 0,
            svgRoot: options.svgRoot,
            shape: options.shape || 'bottom',
            abbreviation: options.abbreviation || '',
            constraintFunction: options.constraintFunction,
            classList: options.classList || ['draggable']
        },
            thumbIcon = document.createElementNS('http://www.w3.org/2000/svg', 'use'),
            thumbLabel = document.createElementNS('http://www.w3.org/2000/svg', 'text'),
            thumbGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g'),
            svgLayer = opts.svgRoot,
            radius = opts.size,
            cx = opts.x,
            cy = opts.y,
            moveDirection = '';

        switch (opts.shape) {
            case 'left':
                moveDirection = 'y';
                thumbIcon.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#l_round');
                break;
            case 'right':
                moveDirection = 'y';
                thumbIcon.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#r_round');
                break;
            case 'bottom':
                moveDirection = 'x';
                opts.classList.push('bottom');
                thumbIcon.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#b_round');
                break;
            case 'top':
                moveDirection = 'x';
                thumbIcon.setAttributeNS('http://www.w3.org/1999/xlink', 'href', '#t_round');
                break;
            default:
                break;
        }

        thumbIcon.setAttributeNS(null, 'width', 2 * radius);
        thumbIcon.setAttributeNS(null, 'height', 2 * radius);
        thumbIcon.setAttributeNS(null, 'x', cx - radius);
        thumbIcon.setAttributeNS(null, 'y', cy - radius);
        thumbIcon.setAttribute('class', 'thumbIcon');

        thumbLabel.setAttributeNS(null, 'text-anchor', 'middle');
        thumbLabel.setAttributeNS(null, 'dominant-baseline', 'middle');
        thumbLabel.setAttributeNS(null, 'lengthAdjust', 'spacingAndGlyphs');
        thumbLabel.setAttributeNS(null, 'x', cx);
        thumbLabel.setAttributeNS(null, 'y', cy);
        thumbLabel.setAttributeNS(null, 'dy', '.1em');
        thumbLabel.setAttribute('class', 'thumbLabel');
        thumbLabel.setAttributeNS(null, 'textLength', radius);
        thumbLabel.textContent = opts.abbreviation;
        thumbLabel.style.pointerEvents = 'all';

        thumbGroup.appendChild(thumbIcon);
        thumbGroup.appendChild(thumbLabel);

        thumbGroup.setAttributeNS(null, 'transform', 'matrix(1 0 0 1 0 0)');
        thumbGroup.setAttribute('class', 'thumb');
        thumbGroup.classList.add(moveDirection);

        if (opts.classList) {
            for (var i = 0; i < opts.classList.length; i++) {
                if (opts.classList[i] !== '') {
                    thumbGroup.classList.add(opts.classList[i]);
                }
            }
        }

        thumbGroup.style.pointerEvents = 'all';
        thumbGroup.addEventListener('mousedown', selectElement, false);
        thumbGroup.addEventListener('touchstart', selectElement, false);
        $(thumbGroup).click(reorderThumbs);

        thumbGroup.constraintFunction = opts.constraintFunction;
        svgLayer.appendChild(thumbGroup);

        return thumbGroup;
    };

    $.thumb.updateComputedXPosition = function (thumb, position) {
        var thumbPositionMatrix = thumb.getCTM(),
            thumbIcon = thumb.childNodes[0],
            thumbLabel = thumb.childNodes[1],
            newThumbLableCx = position - thumbPositionMatrix.e,
            newThumbIconCx = position - thumbPositionMatrix.e - thumb.firstChild.height.baseVal.value / 2;
        thumbIcon.setAttributeNS(null, 'x', newThumbIconCx);
        thumbLabel.setAttributeNS(null, 'x', newThumbLableCx);
    };

    $.thumb.updateComputedYPosition = function (thumb, position) {
        var thumbPositionMatrix = thumb.getCTM(),
            thumbIcon = thumb.childNodes[0],
            thumbLabel = thumb.childNodes[1],
            newThumbLableCy = position - thumbPositionMatrix.f,
            newThumbIconCy = position - thumbPositionMatrix.f - thumb.firstChild.width.baseVal.value / 2;

        thumbIcon.setAttributeNS(null, 'y', newThumbIconCy);
        thumbLabel.setAttributeNS(null, 'y', newThumbLableCy);
    };

    $.thumb.shutdown = function (svgRoot) {
        currentState = null;
        unbindEvents(svgRoot);
    };

    function bindEvents(svgRoot) {
        svgRoot.addEventListener('mousemove', moveElement, false);
        svgRoot.addEventListener('touchmove', moveElement, false);
        svgRoot.addEventListener('mouseup', deselectElement, false);
        svgRoot.addEventListener('touchend', deselectElement, false);
    };

    function moveElement(evt) {
        if (!currentState) {
            return;
        }

        var page = getEventXYPosition(evt),
            target = extractTarget(evt),
            svgRoot = extractSVGFromTarget(target),
            eventHolder = svgRoot.eventHolder;

        if (currentState.selectedElement.constraintFunction) {
            var _currentState$selecte = currentState.selectedElement.constraintFunction(page.X, page.Y, currentState.x, currentState.y);

            var _currentState$selecte2 = babelHelpers.slicedToArray(_currentState$selecte, 2);

            page.X = _currentState$selecte2[0];
            page.Y = _currentState$selecte2[1];
        }

        var currentMatrix = currentState.selectedElement.getCTM(),
            dx = page.X - currentState.x,
            dy = page.Y - currentState.y;

        currentMatrix.e += dx;
        currentMatrix.f += dy;
        currentState.selectedElement.transform.baseVal.getItem(0).setMatrix(currentMatrix);

        //update last mouse position
        currentState.x = page.X;
        currentState.y = page.Y;

        bringThumbToFront(currentState.selectedElement);

        evt.preventDefault();
        evt.stopPropagation();

        //dispach new event to update cursor position
        dispatchThumbEvent('thumbmove', evt, eventHolder);
    };

    function deselectElement(evt) {
        var target = extractTarget(evt),
            svgRoot = extractSVGFromTarget(target),
            eventHolder = svgRoot.eventHolder;

        if (currentState) {
            currentState = null;
            svgRoot.style.pointerEvents = 'none';
            eventHolder.dispatchEvent(new CustomEvent('thumbmoveend', { detail: evt }));
        }
    };

    function selectElement(evt) {
        var target = extractTarget(evt),
            svgRoot = extractSVGFromTarget(target),
            eventHolder = svgRoot.eventHolder;
        currentState = null;
        if (target && target.getAttribute('class').indexOf('draggable') !== -1) {
            var page = getEventXYPosition(evt),
                box = target.getBoundingClientRect(),
                doc = document.documentElement,
                scrollX = (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0),
                scrollY = (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
            currentState = {
                selectedElement: target,
                x: page.X,
                y: page.Y,
                deltaHandlingX: page.X - (box.left + box.right) / 2 - scrollX,
                deltaHandlingY: page.Y - (box.top + box.bottom) / 2 - scrollY
            };
            svgRoot.style.pointerEvents = 'all';
        }

        if (!currentState) {
            return;
        }

        dispatchThumbEvent('thumbmovestart', evt, eventHolder);
    };

    function extractTarget(evt) {
        var target = evt.target;
        var elClass = evt.target.getAttribute('class');
        if (elClass && elClass.indexOf('thumbIcon') !== -1) {
            target = evt.target.parentNode;
            elClass = target.getAttribute('class');
        }
        if (elClass && elClass.indexOf('thumbLabel') !== -1) {
            target = evt.target.parentNode;
            elClass = target.getAttribute('class');
        }
        return target;
    };

    function extractSVGFromTarget(target) {
        if (target.tagName === 'svg') {
            return target;
        }
        if (target.tagName === 'g') {
            return target.parentNode;
        }
        return null;
    };

    function reorderThumbs(evt) {
        var focusEl = extractTarget(evt),
            thumbsCluster = [];
        if (!focusEl || focusEl.getAttribute('class').indexOf('thumb') === -1) {
            return;
        }

        // bring thumb from the bottom of the cluster to top
        thumbsCluster = getThumbCluster(focusEl);
        if (thumbsCluster.length > 0) {
            bringThumbToFront(thumbsCluster[0]);
        }
    };

    // Re-adding the thumb to the svg
    function bringThumbToFront(thumbEl) {
        thumbEl.parentNode.appendChild(thumbEl);
    };

    function getThumbCluster(selectedThumb) {
        var selectedElBBox = selectedThumb.getBoundingClientRect(),
            selLeft = selectedElBBox.left,
            selRight = selectedElBBox.right,
            selTop = selectedElBBox.top,
            selBottom = selectedElBBox.bottom,
            svgLayer = selectedThumb.parentNode;

        var clusterContent = Array.prototype.slice.call(svgLayer.childNodes, 0).filter(function (el) {
            var elBBox = el.getBoundingClientRect(),
                elLeft = elBBox.left,
                elRight = elBBox.right,
                elTop = elBBox.top,
                elBottom = elBBox.bottom;

            if (elBBox.width > 0 && elBBox.height > 0) {
                // true if their boundingbox overlapp
                return selLeft < elRight && selRight > elLeft && selTop < elBottom && selBottom > elTop;
            } else {
                return false;
            }
        });

        return clusterContent;
    };

    function dispatchThumbEvent(eventType, evt, eventTarget) {
        var page = getEventXYPosition(evt),
            thumbEvent = new CustomEvent(eventType, { detail: evt });
        thumbEvent.pageX = page.X - currentState.deltaHandlingX;
        thumbEvent.pageY = page.Y - currentState.deltaHandlingY;
        eventTarget.dispatchEvent(thumbEvent);
    };

    function getEventXYPosition(evt) {
        var page;
        if (evt.touches) {
            page = {
                X: evt.touches[0].pageX,
                Y: evt.touches[0].pageY
            };
        } else {
            page = $.plot.browser.getPageXY(evt);
        }
        return page;
    };

    function unbindEvents(svgRoot) {
        Array.prototype.forEach.call(svgRoot.childNodes, function (el) {
            if (el.classList.contains('thumb')) {
                el.removeEventListener('mousedown', selectElement);
                el.removeEventListener('touchstart', selectElement);
            }
        });
        svgRoot.removeEventListener('mousemove', moveElement);
        svgRoot.removeEventListener('touchmove', moveElement);
        svgRoot.removeEventListener('mouseup', deselectElement);
        svgRoot.removeEventListener('touchend', deselectElement);
    };
})(jQuery);
'use strict';

/* Flot plugin for adding cursors to the plot.

Copyright (c) cipix2000@gmail.com.
Copyright (c) 2007-2014 IOLA and Ole Laursen.
Licensed under the MIT license.
*/

/*global jQuery*/

(function ($) {
    'use strict';

    var options = {
        cursors: []
    };

    var constants = {
        iRectSize: 8,
        symbolSize: 8,
        mouseGrabMargin: 12,
        textHeight: 10, // to do: compute it somehow. Canvas doesn't give us a way to know it
        labelPadding: 10,
        thumbRadius: 17
    };

    function init(plot) {
        var cursors = [];
        var update = [];

        function createCursor(options) {
            return mixin(options, {
                name: 'unnamed ' + cursors.length,
                position: options.position || {
                    relativeX: 0.5, // relative to the with of the drawing area
                    relativeY: 0.5, // relative to the height of the drawing area
                    x: undefined, // plot value
                    y: undefined // plot value
                },
                mousePosition: {
                    relativeX: undefined,
                    relativeY: undefined
                },
                x: 0, // canvas point relative to the actual data area
                y: 0, // canvas point relative to the actual data area
                valign: 'below',
                halign: 'right',
                show: true,
                selected: false,
                highlighted: false,
                mode: 'xy',
                showIntersections: false,
                showLabel: false,
                showValues: true,
                color: 'gray',
                fontSize: '10px',
                fontFamily: 'sans-serif',
                fontStyle: '',
                fontWeight: '',
                lineWidth: 1,
                movable: true,
                mouseButton: 'all',
                dashes: 1,
                intersectionColor: 'darkgray',
                intersectionLabelPosition: 'bottom-right',
                snapToPlot: undefined,
                interpolate: false,
                defaultxaxis: 1,
                defaultyaxis: 1,
                showThumbs: 'none',
                thumbAbbreviation: 'C' + cursors.length,
                thumbClassList: ['draggable'],
                thumbs: []
            });
        }

        plot.hooks.processOptions.push(function (plot) {
            plot.getOptions().cursors.forEach(function (options) {
                plot.addCursor(options);
            });
        });

        plot.hooks.processOffset.push(function (plot, offset) {
            reserveSpaceForThumbs(cursors, plot, offset);
        });

        plot.getCursors = function () {
            return cursors;
        };

        plot.addCursor = function addCursor(options) {
            var currentCursor = createCursor(options);

            setPosition(plot, currentCursor, currentCursor.position);

            cursors.push(currentCursor);

            plot.triggerRedrawOverlay();
        };

        plot.removeCursor = function removeCursor(cursor) {
            var index = cursors.indexOf(cursor);

            if (index !== -1) {
                cursors.splice(index, 1);
            }

            plot.triggerRedrawOverlay();
        };

        plot.setCursor = function setCursor(cursor, options) {
            var index = cursors.indexOf(cursor);

            if (index !== -1) {
                mixin(options, cursors[index]);
                setPosition(plot, cursors[index], cursors[index].position);
                plot.triggerRedrawOverlay();
            }
        };

        plot.getIntersections = function getIntersections(cursor) {
            var index = cursors.indexOf(cursor);

            if (index !== -1) {
                return cursors[index].intersections;
            }

            return [];
        };

        plot.formatCursorPosition = formatCursorPosition;

        var reserveSpaceForThumbs = function reserveSpaceForThumbs(cursors, plot, offset) {
            var positions = ['left', 'right', 'top', 'bottom'],
                offsetIncrement = [],
                index = 0,
                thumbSize = 2 * constants.thumbRadius,
                thumbsPresent,
                axesPresent,
                axes,
                direction;

            offsetIncrement = positions.map(function (position, index) {
                thumbsPresent = cursors.some(function (cursor) {
                    return cursor.showThumbs.indexOf(position[0]) !== -1;
                });

                axes = index > 1 ? plot.getXAxes() : plot.getYAxes();
                axesPresent = axes.some(function (axis) {
                    return axis.options.position === position;
                });

                return thumbsPresent && !axesPresent ? thumbSize : 0;
            });

            for (direction in offset) {
                offset[direction] += offsetIncrement[index++];
            }
        };

        var selectedCursor = function selectedCursor(cursors) {
            var result;

            cursors.forEach(function (cursor) {
                if (cursor.selected) {
                    if (!result) {
                        result = cursor;
                    }
                }
            });

            return result;
        };

        var visibleCursors = function visibleCursors(cursors) {
            return cursors.filter(function (cursor) {
                return cursor.show;
            });
        };

        // possible issues with ie8
        var correctMouseButton = function correctMouseButton(cursor, buttonNumber) {
            switch (cursor.mouseButton) {
                case 'all':
                    return true;
                case 'left':
                    return buttonNumber === 1;
                case 'middle':
                    return buttonNumber === 2;
                case 'right':
                    return buttonNumber === 4;
                default:
                    return true;
            }
        };

        var pan = {
            start: function start(e) {
                var x = getPlotX(e.detail.touches[0].pageX);
                var y = getPlotY(e.detail.touches[0].pageY);
                handleCursorMoveStart(e, x, y, e.detail.touches[0].pageX, e.detail.touches[0].pageY);
            },

            drag: function drag(e) {
                var x = getPlotX(e.detail.touches[0].pageX);
                var y = getPlotY(e.detail.touches[0].pageY);
                handleCursorMove(e, x, y, e.detail.touches[0].pageX, e.detail.touches[0].pageY);
            },

            end: function end(e) {
                var currentlySelectedCursor = selectedCursor(cursors);
                if (currentlySelectedCursor) {
                    currentlySelectedCursor.selected = false;
                }
            }
        };

        var pinch = {
            start: function start(e) {
                var x = getPlotX(e.detail.touches[0].pageX);
                var y = getPlotY(e.detail.touches[0].pageY);
                handleCursorMoveStart(e, x, y, e.detail.touches[0].pageX, e.detail.touches[0].pageY);
            },

            drag: function drag(e) {
                var x = getPlotX(e.detail.touches[0].pageX);
                var y = getPlotY(e.detail.touches[0].pageY);

                handleCursorMove(e, x, y, e.detail.touches[0].pageX, e.detail.touches[0].pageY);
            },

            end: function end(e) {
                var currentlySelectedCursor = selectedCursor(cursors);
                if (currentlySelectedCursor) {
                    currentlySelectedCursor.selected = false;
                }
            }
        };

        var thumbmove = {
            start: function start(e) {
                handleThumbMoveStart(e);
            },

            drag: function drag(e) {
                var x = getPlotX(e.pageX),
                    y = getPlotY(e.pageY);
                handleCursorMove(e, x, y, e.pageX, e.pageY);
            },

            end: function end(e) {
                var currentlySelectedCursor = selectedCursor(cursors);
                if (currentlySelectedCursor) {
                    currentlySelectedCursor.selected = false;
                    currentlySelectedCursor.thumbmove = false;
                }
            }
        };

        var mouseMove = {
            start: function start(e) {
                var page = $.plot.browser.getPageXY(e);
                var x = getPlotX(page.X);
                var y = getPlotY(page.Y);

                handleCursorMoveStart(e, x, y, page.X, page.Y);
            },

            move: function move(e) {
                var page = $.plot.browser.getPageXY(e);
                var x = getPlotX(page.X);
                var y = getPlotY(page.Y);

                handleCursorMove(e, x, y, page.X, page.Y);
            },

            end: function end(e) {
                var page = $.plot.browser.getPageXY(e);
                var x = getPlotX(page.X);
                var y = getPlotY(page.Y);

                handleCursorMoveEnd(e, x, y, page.X, page.Y);
            }
        };

        plot.hooks.bindEvents.push(function (plot, eventHolder) {
            eventHolder[0].addEventListener('panstart', pan.start, false);
            eventHolder[0].addEventListener('pandrag', pan.drag, false);
            eventHolder[0].addEventListener('panend', pan.end, false);
            eventHolder[0].addEventListener('pinchstart', pinch.start, false);
            eventHolder[0].addEventListener('pinchdrag', pinch.drag, false);
            eventHolder[0].addEventListener('pinchend', pinch.end, false);

            eventHolder[0].addEventListener('thumbmovestart', thumbmove.start, false);
            eventHolder[0].addEventListener('thumbmove', thumbmove.drag, false);
            eventHolder[0].addEventListener('thumbmoveend', thumbmove.end, false);

            eventHolder.bind('mousedown', mouseMove.start);
            eventHolder.bind('mousemove', mouseMove.move);
            eventHolder.bind('mouseup', mouseMove.end);
        });

        function findIntersections(plot, cursor) {
            var intersections = {
                cursor: cursor.name,
                points: []
            };
            if (cursor.interpolate) {
                findIntersectionByInterpolation(plot, cursor, intersections);
            } else {
                findNearbyPointsIntersection(plot, cursor, intersections);
            }

            return intersections;
        }

        function findNearbyPointsIntersection(plot, cursor, intersections) {
            var cursorLastMouseX = cursor.mousePosition.relativeX * plot.width(),
                cursorLastMouseY = cursor.mousePosition.relativeY * plot.height(),
                nearestPoint = plot.findNearbyItem(cursorLastMouseX, cursorLastMouseY, function (seriesIndex) {
                return cursor.snapToPlot === -1 || seriesIndex === cursor.snapToPlot;
            }, Number.MAX_VALUE, function (x, y) {
                return x * x + y * y * 0.025;
            });

            if (nearestPoint) {
                var dataset = plot.getData(),
                    ps = dataset[nearestPoint.seriesIndex].datapoints.pointsize,
                    i = nearestPoint.dataIndex * ps;

                intersections.points.push({
                    x: nearestPoint.datapoint[0],
                    y: nearestPoint.datapoint[1],
                    leftPoint: [i - ps, i - ps + 1],
                    rightPoint: [i, i + 1],
                    seriesIndex: nearestPoint.seriesIndex
                });
            }
        }

        function findIntersectionByInterpolation(plot, cursor, intersections) {
            var pos = plot.c2p({
                left: cursor.x,
                top: cursor.y
            });

            var axes = plot.getAxes();
            if (pos.x < axes.xaxis.min || pos.x > axes.xaxis.max || pos.y < axes.yaxis.min || pos.y > axes.yaxis.max) {
                return;
            }

            var interpolationPoint = plot.findNearbyInterpolationPoint(pos.x, pos.y, function (seriesIndex) {
                return cursor.snapToPlot === -1 || seriesIndex === cursor.snapToPlot;
            });

            if (interpolationPoint) {
                intersections.points.push({
                    x: interpolationPoint.datapoint[0],
                    y: interpolationPoint.datapoint[1],
                    leftPoint: interpolationPoint.leftPoint,
                    rightPoint: interpolationPoint.rightPoint,
                    seriesIndex: interpolationPoint.seriesIndex
                });
            }
        }

        function handleThumbMoveStart(e) {
            function isMovable(thumb) {
                return thumb.getAttribute('class').includes('draggable');
            }

            function extractTarget(touchedEl) {
                var target = touchedEl,
                    elClass = touchedEl.getAttribute('class');
                if (elClass.includes('thumbIcon') || elClass.includes('thumbLabel')) {
                    target = touchedEl.parentNode;
                    elClass = target.getAttribute('class');
                }
                if (elClass.includes('thumb')) {
                    return target;
                }

                return null;
            }

            var currentlySelectedCursor = selectedCursor(cursors);
            if (!currentlySelectedCursor) {
                // find nearby cursor and unlock it
                visibleCursors(cursors).filter(function (cursor) {
                    return cursor.movable === true;
                }).forEach(function (cursor) {
                    cursor.thumbs.filter(isMovable).filter(function (t) {
                        return t === extractTarget(e.detail.target);
                    }).forEach(function (thumb) {
                        var targetCursor = cursor;
                        if (targetCursor) {
                            if (thumb.classList.contains('x')) {
                                targetCursor.dragmode = 'x';
                            } else {
                                targetCursor.dragmode = 'y';
                            }
                            targetCursor.selected = true;
                            targetCursor.thumbmove = true;

                            if (targetCursor.mode === 'x') {
                                plot.getPlaceholder().css('cursor', 'ew-resize');
                            } else if (targetCursor.mode === 'y') {
                                plot.getPlaceholder().css('cursor', 'ns-resize');
                            }

                            plot.getPlaceholder().css('cursor', 'move');
                            plot.triggerRedrawOverlay();
                            e.stopImmediatePropagation();
                            e.preventDefault();
                        }
                    });
                });
            }
        }

        function handleCursorMove(e, x, y, pageX, pageY) {
            var currentlySelectedCursor = selectedCursor(cursors);

            if (currentlySelectedCursor && e.buttons !== 0) {
                if (currentlySelectedCursor.dragmode.indexOf('x') !== -1) {
                    currentlySelectedCursor.x = x;
                    currentlySelectedCursor.position.relativeX = currentlySelectedCursor.x / plot.width();
                    currentlySelectedCursor.mousePosition.relativeX = x / plot.width();
                }

                if (currentlySelectedCursor.dragmode.indexOf('y') !== -1) {
                    currentlySelectedCursor.y = y;
                    currentlySelectedCursor.position.relativeY = currentlySelectedCursor.y / plot.height();
                    currentlySelectedCursor.mousePosition.relativeY = y / plot.height();
                }

                plot.triggerRedrawOverlay();
                e.stopImmediatePropagation();
                e.preventDefault();
            } else {
                // in case the mouse button was released outside the plot area
                if (currentlySelectedCursor && e.buttons === 0) {
                    currentlySelectedCursor.selected = false;
                    plot.triggerRedrawOverlay();
                }
                visibleCursors(cursors).forEach(function (cursor) {
                    if (!cursor.movable) {
                        return;
                    }
                    if (mouseOverCursorManipulator(pageX, pageY, plot, cursor)) {
                        if (!cursor.highlighted) {
                            cursor.highlighted = true;
                            plot.triggerRedrawOverlay();
                        }

                        plot.getPlaceholder().css('cursor', 'pointer');
                    } else if (mouseOverCursorVerticalLine(pageX, pageY, plot, cursor)) {
                        if (!cursor.highlighted) {
                            cursor.highlighted = true;
                            plot.triggerRedrawOverlay();
                        }

                        plot.getPlaceholder().css('cursor', 'col-resize');
                    } else if (mouseOverCursorHorizontalLine(pageX, pageY, plot, cursor)) {
                        if (!cursor.highlighted) {
                            cursor.highlighted = true;
                            plot.triggerRedrawOverlay();
                        }

                        plot.getPlaceholder().css('cursor', 'row-resize');
                    } else {
                        if (cursor.highlighted) {
                            cursor.highlighted = false;
                            plot.getPlaceholder().css('cursor', 'default');
                            plot.triggerRedrawOverlay();
                        }
                    }
                });
            }
        }

        function handleCursorMoveStart(e, x, y, pageX, pageY) {
            var currentlySelectedCursor = selectedCursor(cursors);
            if (currentlySelectedCursor) {
                plot.getPlaceholder().css('cursor', 'default');
                currentlySelectedCursor.x = x;
                currentlySelectedCursor.y = y;
                currentlySelectedCursor.position.relativeX = currentlySelectedCursor.x / plot.width();
                currentlySelectedCursor.position.relativeY = currentlySelectedCursor.y / plot.height();

                plot.triggerRedrawOverlay();
            } else {
                // find nearby cursor and unlock it
                var targetCursor;
                var dragmode;

                visibleCursors(cursors).forEach(function (cursor) {
                    if (!cursor.movable) {
                        return;
                    }
                    if (mouseOverCursorHorizontalLine(pageX, pageY, plot, cursor)) {
                        targetCursor = cursor;
                        dragmode = 'y';
                    }
                    if (mouseOverCursorVerticalLine(pageX, pageY, plot, cursor)) {
                        targetCursor = cursor;
                        dragmode = 'x';
                    }
                    if (mouseOverCursorManipulator(pageX, pageY, plot, cursor)) {
                        targetCursor = cursor;
                        dragmode = 'xy';
                    }
                });

                if (targetCursor) {
                    if (!correctMouseButton(targetCursor, e.buttons)) {
                        return;
                    }
                    targetCursor.thumbmove = false;
                    targetCursor.selected = true;
                    targetCursor.dragmode = dragmode;
                    // changed for InsightCM -max
                    if (targetCursor.mode === 'x') {
                        plot.getPlaceholder().css('cursor', 'ew-resize');
                    } else if (targetCursor.mode === 'y') {
                        plot.getPlaceholder().css('cursor', 'ns-resize');
                    } else {
                        plot.getPlaceholder().css('cursor', 'move');
                    }
                    plot.getPlaceholder().css('cursor', 'move');
                    plot.triggerRedrawOverlay();
                    e.stopImmediatePropagation();
                    e.preventDefault();
                }
            }
        }

        function handleCursorMoveEnd(e, x, y, pageX, pageY) {
            var currentlySelectedCursor = selectedCursor(cursors);

            if (currentlySelectedCursor) {
                if (!correctMouseButton(currentlySelectedCursor, e.buttons)) {
                    return;
                }
                // lock the free cursor to current position
                currentlySelectedCursor.selected = false;
                currentlySelectedCursor.thumbmove = false;
                if (currentlySelectedCursor.dragmode.indexOf('x') !== -1) {
                    currentlySelectedCursor.x = x;
                    currentlySelectedCursor.mousePosition.relativeX = x / plot.width();
                    currentlySelectedCursor.position.relativeX = currentlySelectedCursor.x / plot.width();
                }

                if (currentlySelectedCursor.dragmode.indexOf('y') !== -1) {
                    currentlySelectedCursor.y = y;
                    currentlySelectedCursor.mousePosition.relativeY = y / plot.height();
                    currentlySelectedCursor.position.relativeY = currentlySelectedCursor.y / plot.height();
                }

                plot.getPlaceholder().css('cursor', 'default');
                plot.triggerRedrawOverlay();
                e.stopImmediatePropagation();
                e.preventDefault();
            }
        }

        function getPlotX(pageX) {
            var offset = plot.offset();
            return Math.max(0, Math.min(pageX - offset.left, plot.width()));
        }

        function getPlotY(pageY) {
            var offset = plot.offset();
            return Math.max(0, Math.min(pageY - offset.top, plot.height()));
        }

        plot.hooks.drawOverlay.push(function (plot, ctx) {
            var isPositionInitialized = function isPositionInitialized(position) {
                return position.x !== undefined && position.y !== undefined && position.relativeX !== undefined && position.relativeY !== undefined;
            },
                isMousePositionInitilized = function isMousePositionInitilized(mousePosition) {
                return mousePosition.relativeX !== undefined && mousePosition.relativeY !== undefined;
            };

            update = [];

            cursors.forEach(function (cursor) {
                var intersections;

                if (!isPositionInitialized(cursor.position)) {
                    setPosition(plot, cursor, cursor.position);
                }
                if (!isMousePositionInitilized(cursor.mousePosition)) {
                    cursor.mousePosition.relativeX = cursor.x / plot.width();
                    cursor.mousePosition.relativeY = cursor.y / plot.height();
                }

                intersections = findIntersections(plot, cursor);
                maybeSnapToPlot(plot, cursor, intersections);
                cursor.intersections = intersections;
                intersections.target = cursor;
                update.push(intersections);

                if (cursor.show) {
                    var plotOffset = plot.getPlotOffset();

                    ctx.save();
                    ctx.translate(plotOffset.left, plotOffset.top);

                    determineAndSetTextQuadrant(plot, ctx, cursor);
                    drawVerticalAndHorizontalLines(plot, ctx, cursor);
                    drawLabel(plot, ctx, cursor);
                    drawIntersections(plot, ctx, cursor);
                    drawValues(plot, ctx, cursor);
                    if (cursor.symbol !== 'none') {
                        drawManipulator(plot, ctx, cursor);
                    }

                    ctx.restore();

                    if (cursor.showThumbs !== 'none') {
                        if (cursor.thumbs.length === 0) {
                            createThumbs(cursor, plot, plotOffset);
                        } else if (!cursor.thumbmove) {
                            //the case where cursor was moved not due to a thumb move
                            updateThumbsPosition(cursor, plotOffset);
                        }
                    }
                }
            });

            if (update.length > 0) {
                plot.getPlaceholder().trigger('cursorupdates', [update]);
            }
        });

        function createThumbs(cursor, plot, plotOffset) {
            var svgRoot = $.thumb.createSVGLayer(plot.getPlaceholder(), plot.getEventHolder()),
                thumb,
                thumbCx,
                thumbCy,
                constraintFunction,
                thumbOptions = {
                size: constants.thumbRadius,
                svgRoot: svgRoot,
                abbreviation: cursor.thumbAbbreviation || cursor.name[0],
                classList: cursor.thumbClassList
            };

            if (xAxisThumb(cursor)) {
                thumbCx = cursor.x + plotOffset.left;
                thumbCy = cursor.showThumbs.indexOf('b') !== -1 ? plot.height() + plotOffset.top + constants.thumbRadius : plotOffset.top - constants.thumbRadius;
                constraintFunction = function constraintFunction(mouseX, mouseY, currentX, currentY) {
                    var offsetLeft = plot.offset().left,
                        x = Math.max(offsetLeft, Math.min(mouseX, plot.width() + offsetLeft));
                    return [x, currentY];
                };

                thumbOptions.shape = cursor.showThumbs.indexOf('b') !== -1 ? 'bottom' : 'top';
                thumbOptions.x = thumbCx;
                thumbOptions.y = thumbCy;
                thumbOptions.constraintFunction = constraintFunction;

                thumb = $.thumb.createThumb(thumbOptions);
                cursor.thumbs.push(thumb);
            }
            if (yAxisThumb(cursor)) {
                thumbCx = cursor.showThumbs.indexOf('l') !== -1 ? plotOffset.left - constants.thumbRadius : plotOffset.left + plot.width() + constants.thumbRadius;
                thumbCy = cursor.y + plotOffset.top;
                constraintFunction = function constraintFunction(mouseX, mouseY, currentX, currentY) {
                    var offset = plot.offset(),
                        y = Math.max(offset.top, Math.min(mouseY, plot.height() + offset.top));
                    return [currentX, y];
                };

                thumbOptions.shape = cursor.showThumbs.indexOf('l') !== -1 ? 'left' : 'right';
                thumbOptions.x = thumbCx;
                thumbOptions.y = thumbCy;
                thumbOptions.constraintFunction = constraintFunction;

                thumb = $.thumb.createThumb(thumbOptions);
                cursor.thumbs.push(thumb);
            }
        }

        function updateThumbsPosition(cursor, plotOffset) {
            var cursorX, cursorY, yThumbIndex;
            if (xAxisThumb(cursor)) {
                cursorX = cursor.x + plotOffset.left;
                $.thumb.updateComputedXPosition(cursor.thumbs[0], cursorX);
            }
            if (yAxisThumb(cursor)) {
                cursorY = cursor.y + plotOffset.top;
                yThumbIndex = xAxisThumb(cursor) ? 1 : 0;
                $.thumb.updateComputedYPosition(cursor.thumbs[yThumbIndex], cursorY);
            }
        }

        function xAxisThumb(cursor) {
            return cursor.showThumbs.indexOf('b') !== -1 || cursor.showThumbs.indexOf('t') !== -1;
        }

        function yAxisThumb(cursor) {
            return cursor.showThumbs.indexOf('l') !== -1 || cursor.showThumbs.indexOf('r') !== -1;
        }

        plot.hooks.shutdown.push(function (plot, eventHolder) {
            eventHolder[0].removeEventListener('panstart', pan.start);
            eventHolder[0].removeEventListener('pandrag', pan.drag);
            eventHolder[0].removeEventListener('panend', pan.end);
            eventHolder[0].removeEventListener('pinchstart', pinch.start);
            eventHolder[0].removeEventListener('pinchdrag', pinch.drag);
            eventHolder[0].removeEventListener('pinchend', pinch.end);

            eventHolder[0].removeEventListener('thumbmovestart', thumbmove.start);
            eventHolder[0].removeEventListener('thumbmove', thumbmove.drag);
            eventHolder[0].removeEventListener('thumbmoveend', thumbmove.end);

            eventHolder.unbind('mousedown', mouseMove.start);
            eventHolder.unbind('mousemove', mouseMove.move);
            eventHolder.unbind('mouseup', mouseMove.end);

            eventHolder.unbind('cursorupdates');

            var placeholder = plot.getPlaceholder();
            placeholder.css('cursor', 'default');
            if (placeholder.find('.flot-thumbs')[0]) {
                $.thumb.shutdown(placeholder.find('.flot-thumbs')[0].firstChild);
            }
        });
    }

    function mixin(source, destination) {
        Object.keys(source).forEach(function (key) {
            destination[key] = source[key];
        });

        return destination;
    }

    /**
        Calculate and set the canvas coords based on relative coords or plot values.
        When both provided then the relative coords will be took into account
        and the plot values ignored.
     */
    function setPosition(plot, cursor, pos) {
        var xaxis = findXAxis(plot, cursor),
            yaxis = findYAxis(plot, cursor),
            x = pos.relativeX !== undefined ? pos.relativeX * plot.width() : xaxis.p2c ? xaxis.p2c(pos.x) : undefined,
            y = pos.relativeX !== undefined ? pos.relativeY * plot.height() : yaxis.p2c ? yaxis.p2c(pos.y) : undefined;

        cursor.x = Math.max(0, Math.min(x, plot.width()));
        cursor.y = Math.max(0, Math.min(y, plot.height()));
    }

    function maybeSnapToPlot(plot, cursor, intersections) {
        if (cursor.snapToPlot >= -1) {
            var point = intersections.points[0];

            if (point) {
                var plotData = plot.getData()[point.seriesIndex],
                    relativeX = plotData.xaxis.p2c(point.x) / plot.width(),
                    relativeY = plotData.yaxis.p2c(point.y) / plot.height();

                setPosition(plot, cursor, {
                    x: point.x,
                    y: point.y
                });

                cursor.position.relativeX = relativeX;
                cursor.position.relativeY = relativeY;
                intersections.x = point.x; // update cursor position
                intersections.y = point.y;
            }
        }
    }

    function determineAndSetTextQuadrant(plot, ctx, cursor) {
        var width = plot.width(),
            height = plot.height(),
            y = cursor.y,
            x = cursor.x,
            rowsWidth = 0,
            rowsHeight = 0,
            count = rowCount(cursor),
            fontSizeInPx = Number(cursor.fontSize.substring(0, cursor.fontSize.length - 2)),
            lowerLimit = 0.05,
            higherLimit = 1 - lowerLimit;

        ctx.font = cursor.fontStyle + ' ' + cursor.fontWeight + ' ' + cursor.fontSize + ' ' + cursor.fontFamily;
        if (cursor.showLabel) {
            rowsWidth = Math.max(rowsWidth, ctx.measureText(cursor.name).width);
        }
        if (cursor.showValues) {
            var positionTextValues = formatCursorPosition(plot, cursor),
                text = positionTextValues.xTextValue + ", " + positionTextValues.yTextValue;
            rowsWidth = Math.max(rowsWidth, ctx.measureText(text).width);
        }

        if (cursor.halign === 'right' && x + rowsWidth > width * higherLimit) {
            cursor.halign = 'left';
        } else if (cursor.halign === 'left' && x - rowsWidth < width * lowerLimit) {
            cursor.halign = 'right';
        }

        rowsHeight = count * (fontSizeInPx + constants.labelPadding);

        if (cursor.valign === 'below' && y + rowsHeight > height * higherLimit) {
            cursor.valign = 'above';
        } else if (cursor.valign === 'above' && y - rowsHeight < height * lowerLimit) {
            cursor.valign = 'below';
        }
    }

    /**
     * The text displayed next to the cursor can be stacked as rows and their positions can be calculated with this function.
     * The bottom one has the index = 0, and the top one has the index = count -1. Depending on the current cursor's possition
     * relative to the center of the plot, index and count, the positions will be computed like this:
     *
     *               |
     *           two | two
     *           one | one
     *          zero | zero
     *       --------+--------
     *           two | two
     *           one | one
     *          zero | zero
     *               |
     */
    function computeRowPosition(plot, cursor, index, count) {
        var textAlign = 'left';
        var fontSizeInPx = Number(cursor.fontSize.substring(0, cursor.fontSize.length - 2));

        var y = cursor.y;
        var x = cursor.x;

        if (cursor.halign === 'left') {
            x -= constants.labelPadding;
            textAlign = 'right';
        } else {
            x += constants.labelPadding;
        }

        if (cursor.valign === 'above') {
            y -= constants.labelPadding * (count - index) + fontSizeInPx * (count - 1 - index);
        } else {
            y += constants.labelPadding * (index + 1) + fontSizeInPx * (index + 1);
        }

        return {
            x: x,
            y: y,
            textAlign: textAlign
        };
    }

    function rowCount(cursor) {
        return (cursor.showLabel ? 1 : 0) + (cursor.showValues ? 1 : 0);
    }

    function labelRowIndex(cursor) {
        return 0;
    }

    function valuesRowIndex(cursor) {
        return cursor.showLabel ? 1 : 0;
    }

    function drawLabel(plot, ctx, cursor) {
        if (cursor.showLabel) {
            ctx.beginPath();
            var position = computeRowPosition(plot, cursor, labelRowIndex(cursor), rowCount(cursor));
            ctx.fillStyle = cursor.color;
            ctx.textAlign = position.textAlign;
            ctx.font = cursor.fontStyle + ' ' + cursor.fontWeight + ' ' + cursor.fontSize + ' ' + cursor.fontFamily;
            ctx.fillText(cursor.name, position.x, position.y);
            ctx.textAlign = 'left';
            ctx.stroke();
        }
    }

    function fillTextAligned(ctx, text, x, y, position, fontStyle, fontWeight, fontSize, fontFamily) {
        var fontSizeInPx = Number(fontSize.substring(0, fontSize.length - 2));
        var textWidth;
        switch (position) {
            case 'left':
                textWidth = ctx.measureText(text).width;
                x = x - textWidth - constants.iRectSize;
                break;
            case 'bottom-left':
                textWidth = ctx.measureText(text).width;
                x = x - textWidth - constants.iRectSize;
                y = y + fontSizeInPx;
                break;
            case 'top-left':
                textWidth = ctx.measureText(text).width;
                x = x - textWidth - constants.iRectSize;
                y = y - constants.iRectSize;
                break;
            case 'top-right':
                x = x + constants.iRectSize;
                y = y - constants.iRectSize;
                break;
            case 'right':
                x = x + constants.iRectSize;
                break;
            case 'bottom-right':
            default:
                x = x + constants.iRectSize;
                y = y + fontSizeInPx;
                break;
        }

        ctx.textBaseline = "middle";
        ctx.font = fontStyle + ' ' + fontWeight + ' ' + fontSize + ' ' + fontFamily;
        ctx.fillText(text, x, y);
    }

    function drawIntersections(plot, ctx, cursor) {
        if (cursor.showIntersections && hasVerticalLine(cursor)) {
            ctx.beginPath();
            if (cursor.intersections === undefined) {
                return;
            }
            cursor.intersections.points.forEach(function (point, index) {
                if (babelHelpers.typeof(cursor.showIntersections) === 'object') {
                    if (cursor.showIntersections.indexOf(index) === -1) {
                        return;
                    }
                }
                var coord = plot.p2c(point);
                ctx.fillStyle = cursor.intersectionColor;
                ctx.fillRect(Math.floor(coord.left) - constants.iRectSize / 2, Math.floor(coord.top) - constants.iRectSize / 2, constants.iRectSize, constants.iRectSize);

                var text;
                if (typeof cursor.formatIntersectionData === 'function') {
                    text = cursor.formatIntersectionData(point);
                } else {
                    text = point.y.toFixed(2);
                }

                fillTextAligned(ctx, text, coord.left, coord.top, cursor.intersectionLabelPosition, cursor.fontStyle, cursor.fontWeight, cursor.fontSize, cursor.fontFamily);
            });
            ctx.stroke();
        }
    }

    function computeCursorsPrecision(plot, axis, canvasPosition) {
        var canvas2 = axis.direction === "x" ? canvasPosition + 1 : canvasPosition - 1,
            point1 = axis.c2p(canvasPosition),
            point2 = axis.c2p(canvas2);

        return plot.computeValuePrecision(point1, point2, axis.direction, 1);
    }

    function findXAxis(plot, cursor) {
        var dataset = plot.getData(),
            xaxes = plot.getXAxes(),
            zeroBasedIndex = cursor.defaultxaxis - 1;
        if (cursor.snapToPlot >= -1) {
            if (cursor.intersections && cursor.intersections.points[0]) {
                var series = dataset[cursor.intersections.points[0].seriesIndex];
                return series ? series.xaxis : xaxes[zeroBasedIndex];
            } else {
                return xaxes[zeroBasedIndex];
            }
        } else {
            return xaxes[zeroBasedIndex];
        }
    }

    function findYAxis(plot, cursor) {
        var dataset = plot.getData(),
            yaxes = plot.getYAxes(),
            zeroBasedIndex = cursor.defaultyaxis - 1;
        if (cursor.snapToPlot >= -1) {
            if (cursor.intersections && cursor.intersections.points[0]) {
                var series = dataset[cursor.intersections.points[0].seriesIndex];
                return series ? series.yaxis : yaxes[zeroBasedIndex];
            } else {
                return yaxes[zeroBasedIndex];
            }
        } else {
            return yaxes[zeroBasedIndex];
        }
    }

    function formatCursorPosition(plot, cursor) {
        var xaxis = findXAxis(plot, cursor),
            yaxis = findYAxis(plot, cursor),
            htmlSpace = '&nbsp;',
            htmlNewline = '<br>',
            xaxisPrecision = computeCursorsPrecision(plot, xaxis, cursor.x),
            xFormattedValue = xaxis.tickFormatter(xaxis.c2p(cursor.x), xaxis, xaxisPrecision, plot),
            yaxisPrecision = computeCursorsPrecision(plot, yaxis, cursor.y),
            yFormattedValue = yaxis.tickFormatter(yaxis.c2p(cursor.y), yaxis, yaxisPrecision, plot);

        xFormattedValue = xFormattedValue.replace(htmlNewline, " ");
        xFormattedValue = xFormattedValue.replace(htmlSpace, " ");

        yFormattedValue = yFormattedValue.replace(htmlNewline, " ");
        yFormattedValue = yFormattedValue.replace(htmlSpace, " ");

        return {
            xTextValue: xFormattedValue,
            yTextValue: yFormattedValue
        };
    }

    function drawValues(plot, ctx, cursor) {
        if (cursor.showValues) {
            var positionTextValues = formatCursorPosition(plot, cursor),
                text = positionTextValues.xTextValue + ", " + positionTextValues.yTextValue,
                position = computeRowPosition(plot, cursor, valuesRowIndex(cursor), rowCount(cursor));

            ctx.fillStyle = cursor.color;
            ctx.textAlign = position.textAlign;
            ctx.font = cursor.fontStyle + ' ' + cursor.fontWeight + ' ' + cursor.fontSize + ' ' + cursor.fontFamily;
            ctx.fillText(text, position.x, position.y);
        }
    }

    function drawVerticalAndHorizontalLines(plot, ctx, cursor) {
        // abort draw if linewidth is zero
        if (cursor.lineWidth === 0) {
            return;
        }
        // keep line sharp
        var adj = cursor.lineWidth % 2 ? 0.5 : 0,
            delta,
            numberOfSegments,
            i;

        ctx.strokeStyle = cursor.color;
        ctx.lineWidth = cursor.lineWidth;
        ctx.lineJoin = "round";

        ctx.beginPath();

        if (cursor.mode.indexOf("x") !== -1) {
            var drawX = Math.floor(cursor.x) + adj;
            if (cursor.dashes <= 0) {
                ctx.moveTo(drawX, 0);
                ctx.lineTo(drawX, plot.height());
            } else {
                numberOfSegments = cursor.dashes * 2 - 1;
                delta = plot.height() / numberOfSegments;
                for (i = 0; i < numberOfSegments; i += 2) {
                    ctx.moveTo(drawX, delta * i);
                    ctx.lineTo(drawX, delta * (i + 1));
                }
            }
        }

        if (cursor.mode.indexOf("y") !== -1) {
            var drawY = Math.floor(cursor.y) + adj;
            if (cursor.dashes <= 0) {
                ctx.moveTo(0, drawY);
                ctx.lineTo(plot.width(), drawY);
            } else {
                numberOfSegments = cursor.dashes * 2 - 1;
                delta = plot.width() / numberOfSegments;
                for (i = 0; i < numberOfSegments; i += 2) {
                    ctx.moveTo(delta * i, drawY);
                    ctx.lineTo(delta * (i + 1), drawY);
                }
            }
        }

        ctx.stroke();
    }

    function drawManipulator(plot, ctx, cursor) {
        // keep line sharp
        var adj = cursor.lineWidth % 2 ? 0.5 : 0;
        ctx.beginPath();

        if (cursor.highlighted) {
            ctx.strokeStyle = 'orange';
        } else {
            ctx.strokeStyle = cursor.color;
        }
        if (cursor.symbol && plot.drawSymbol && plot.drawSymbol[cursor.symbol]) {
            //first draw a white background
            ctx.fillStyle = 'white';
            ctx.fillRect(Math.floor(cursor.x) + adj - (constants.symbolSize / 2 + 1), Math.floor(cursor.y) + adj - (constants.symbolSize / 2 + 1), constants.symbolSize + 2, constants.symbolSize + 2);
            plot.drawSymbol[cursor.symbol](ctx, Math.floor(cursor.x) + adj, Math.floor(cursor.y) + adj, constants.symbolSize / 2, 0);
        } else {
            ctx.fillRect(Math.floor(cursor.x) + adj - constants.symbolSize / 2, Math.floor(cursor.y) + adj - constants.symbolSize / 2, constants.symbolSize, constants.symbolSize);
        }

        ctx.stroke();
    }

    function hasVerticalLine(cursor) {
        return cursor.mode.indexOf('x') !== -1;
    }

    function hasHorizontalLine(cursor) {
        return cursor.mode.indexOf('y') !== -1;
    }

    function mouseOverCursorManipulator(x, y, plot, cursor) {
        var offset = plot.offset();
        var mouseX = Math.max(0, Math.min(x - offset.left, plot.width()));
        var mouseY = Math.max(0, Math.min(y - offset.top, plot.height()));
        var grabRadius = constants.symbolSize + constants.mouseGrabMargin;

        return mouseX > cursor.x - grabRadius && mouseX < cursor.x + grabRadius && mouseY > cursor.y - grabRadius && mouseY < cursor.y + grabRadius && cursor.symbol !== 'none';
    }

    function mouseOverCursorVerticalLine(x, y, plot, cursor) {
        var offset = plot.offset();
        var mouseX = Math.max(0, Math.min(x - offset.left, plot.width()));
        var mouseY = Math.max(0, Math.min(y - offset.top, plot.height()));

        return hasVerticalLine(cursor) && mouseX > cursor.x - constants.mouseGrabMargin && mouseX < cursor.x + constants.mouseGrabMargin && mouseY > 0 && mouseY < plot.height();
    }

    function mouseOverCursorHorizontalLine(x, y, plot, cursor) {
        var offset = plot.offset();
        var mouseX = Math.max(0, Math.min(x - offset.left, plot.width()));
        var mouseY = Math.max(0, Math.min(y - offset.top, plot.height()));

        return hasHorizontalLine(cursor) && mouseY > cursor.y - constants.mouseGrabMargin && mouseY < cursor.y + constants.mouseGrabMargin && mouseX > 0 && mouseX < plot.width();
    }

    $.plot.plugins.push({
        init: init,
        options: options,
        name: 'cursors',
        version: '0.2'
    });
})(jQuery);
//# sourceMappingURL=jquery.flot.cursors.js.map
